C51 COMPILER V9.02   EXERCICIO3                                                            06/07/2012 14:34:14 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE EXERCICIO3
OBJECT MODULE PLACED IN exercicio3.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE exercicio3.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg51.h> // Arquivo com os endereços dos registradores do 8051
   2          
   3          unsigned char convert_7seg(unsigned char);
   4          
   5          void main()
   6          {
   7   1              short i;
   8   1              short count;
   9   1              unsigned char data switchsVals;
  10   1              unsigned char data P2invert;
  11   1              unsigned char j;
  12   1              P0 = 0x80;      //Habilita apenas o CS do decoder dos 7seg
  13   1              P3 = 0xFF;      //Mantem todos os pinos P3 em alto (P3.3 (A0) e P3.4 (A1) estão ligados ao decoder)
  14   1              while(1)
  15   1              {
  16   2                      P2invert = ~P2;                         //Complementa os valores de P2 pois é como o EDSIM funciona
  17   2                      for(j=0;j<8;j++)                        //Loop de 8 turnos para checar cada chave
  18   2                      {
  19   3                              for(i=0; i<6000; i++);                          //Criando delay
  20   3                              switchsVals = P2invert << j;            //Armazena no switchsVals os valores de P2 deslocados em j vezes.
  21   3                              switchsVals = switchsVals & 0x80;       //Multiplica o MSB do valor deslocado por 1 e o resto por 0. Assim so
             -mente o MSB será 1 (ou 0)
  22   3                              if(switchsVals == 0x80) count++;        //Checa se o MSB é 1 ou não, ou seja, vê se aquela chave está fechada 
             -e incrementa a contagem
  23   3                              //Faz um novo loop e checa a proxima chave (deslocando mais vetores dessa vez)
  24   3                      }
  25   2                      P1 = convert_7seg(count);       //Joga o valor da contagem realizada para o P1 que mostrará no display 7seg
  26   2                      count = 0;                                      //Zera o contador
  27   2              }
  28   1      
  29   1      }
  30          
  31          unsigned char convert_7seg(unsigned char dado)
  32          {
  33   1              //Converte o dado enviado para (de 0 a 15) para o formato compativel com displays hexadecimais (sete segm
             -entos)
  34   1              unsigned char led;
  35   1              switch(dado)                                    // "GFEDCBA"
  36   1              {
  37   2                      case 0: led = 0x40; break;      // "1000000";
  38   2                      case 1: led = 0x79; break;      // "1111001";
  39   2                      case 2: led = 0x24; break;      // "0100100";
  40   2                      case 3: led = 0x30; break;      // "0110000";
  41   2                      case 4: led = 0x19; break;      // "0011001";
  42   2                      case 5: led = 0x12; break;      // "0010010";
  43   2                      case 6: led = 0x02; break;      // "0000010";
  44   2                      case 7: led = 0x78; break;      // "1111000";
  45   2                      case 8: led = 0x00; break;      // "0000000";
  46   2                      case 9: led = 0x10; break;      // "0010000";
  47   2                      case 10: led = 0x08; break; // "0001000";
  48   2                      case 11: led = 0x03; break; // "0000011";
  49   2                      case 12: led = 0x46; break; // "1000110";
  50   2                      case 13: led = 0x21; break; // "0100001";
  51   2                      case 14: led = 0x06; break; // "0000110";
  52   2                      case 15: led = 0x0E; break; // "0001110";
C51 COMPILER V9.02   EXERCICIO3                                                            06/07/2012 14:34:14 PAGE 2   

  53   2                      default: led = 0x80;            // "0000000";
  54   2              }
  55   1      
  56   1              return led;
  57   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    199    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
