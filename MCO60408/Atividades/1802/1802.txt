/*
 * 1802.c
 *
 * Created: 18/10/2015 16:10:08
 * Author : Gustavo
 */ 

#define F_CPU 16000000UL

#include <avr/io.h>
#include <util/delay.h>
#include <avr/pgmspace.h>

#define set_bit(Y, bit_x) (Y|=(1<<bit_x))
#define clr_bit(Y, bit_x) (Y&=~(1<<bit_x))
#define cpl_bit(Y, bit_x) (Y^=(1<<bit_x))
#define tst_bit(Y, bit_x) (Y&(1<<bit_x))

#define DISPLAY_PORT PORTD
#define DISPLAY_DDR DDRD

#define A_seg PD0
#define B_seg PD1
#define C_seg PD2
#define D_seg PD3
#define E_seg PD4
#define F_seg PD5
#define G_seg PD6

#define BOTAO_PORT PORTB
#define BOTAO_DDR DDRB
#define BOTAO PB7

#define DISPLAY0 PB0
#define DISPLAY1 PB1
#define DISPLAY2 PB2
#define DISPLAY3 PB3

void num0(unsigned char cont);
void num1(unsigned char cont);
void num2(unsigned char cont);
void num3(unsigned char cont);
void num4(unsigned char cont);
void num5(unsigned char cont);
void num6(unsigned char cont);
void num7(unsigned char cont);
void num8(unsigned char cont);
void num9(unsigned char cont);

int main(void)
{
	DISPLAY_PORT = 0b11111111;
	DISPLAY_DDR = 0xFF;
	BOTAO_PORT = 0b01111111;
	BOTAO_DDR = 0xFF;
	
    unsigned char i = 0;
	unsigned int n = 0;
	unsigned int leds[4];
	unsigned int valor = 1802;
	
    while (1) 
    {
		leds[0] = (valor % 10) - 1;
		leds[1] = ((valor/10) % 10) - 1;
		leds[2] = ((valor/100) % 10) - 1;
		leds[3] = ((valor/1000) % 10) - 1;
				
		if(tst_bit(PINB, BOTAO))
		{
			for(i=0; i<4; i++)
			{
				clr_bit(BOTAO_PORT, DISPLAY0);
				clr_bit(BOTAO_PORT, DISPLAY1);
				clr_bit(BOTAO_PORT, DISPLAY2);
				clr_bit(BOTAO_PORT, DISPLAY3);
				
				n = leds[i];
				num0(n);
				num1(n);
				num2(n);
				num3(n);
				num4(n);
				num5(n);
				num6(n);
				num7(n);
				num8(n);
				num9(n);
				if(i == 0)
					set_bit(BOTAO_PORT, DISPLAY0);
				if(i == 1)
					set_bit(BOTAO_PORT, DISPLAY1);
				if(i == 2)
					set_bit(BOTAO_PORT, DISPLAY2);
				if(i == 3)
					set_bit(BOTAO_PORT, DISPLAY3);
				_delay_ms(3);
			}
			valor++;
		}
		
		else if(!tst_bit(PINB, BOTAO))
		{
			for(i=0; i<4; i++)
		{
				clr_bit(BOTAO_PORT, DISPLAY0);
				clr_bit(BOTAO_PORT, DISPLAY1);
				clr_bit(BOTAO_PORT, DISPLAY2);
				clr_bit(BOTAO_PORT, DISPLAY3);
				
				n = leds[i];
				num0(n);
				num1(n);
				num2(n);
				num3(n);
				num4(n);
				num5(n);
				num6(n);
				num7(n);
				num8(n);
				num9(n);
				if(i == 0)
				set_bit(BOTAO_PORT, DISPLAY0);
				if(i == 1)
				set_bit(BOTAO_PORT, DISPLAY1);
				if(i == 2)
				set_bit(BOTAO_PORT, DISPLAY2);
				if(i == 3)
				set_bit(BOTAO_PORT, DISPLAY3);
				_delay_ms(3);
		}
		}
    }
}


void num0(unsigned char cont)
{
	if(cont == 9)
	{
		clr_bit(DISPLAY_PORT, A_seg);
		clr_bit(DISPLAY_PORT, B_seg);
		clr_bit(DISPLAY_PORT, C_seg);
		clr_bit(DISPLAY_PORT, D_seg);
		clr_bit(DISPLAY_PORT, E_seg);
		clr_bit(DISPLAY_PORT, F_seg);
		set_bit(DISPLAY_PORT, G_seg);
	}
	
}

void num1(unsigned char cont)
{
	if(cont == 0)
	{
	set_bit(DISPLAY_PORT, A_seg);
	clr_bit(DISPLAY_PORT, B_seg);
	clr_bit(DISPLAY_PORT, C_seg);
	set_bit(DISPLAY_PORT, D_seg);
	set_bit(DISPLAY_PORT, E_seg);
	set_bit(DISPLAY_PORT, F_seg);
	set_bit(DISPLAY_PORT, G_seg);
	}
	
}

void num2(unsigned char cont)
{
	if(cont == 1)
	{
	clr_bit(DISPLAY_PORT, A_seg);
	clr_bit(DISPLAY_PORT, B_seg);
	set_bit(DISPLAY_PORT, C_seg);
	clr_bit(DISPLAY_PORT, D_seg);
	clr_bit(DISPLAY_PORT, E_seg);
	set_bit(DISPLAY_PORT, F_seg);
	clr_bit(DISPLAY_PORT, G_seg);	
	}
	
}

void num3(unsigned char cont)
{
	if(cont == 2)
	{
	clr_bit(DISPLAY_PORT, A_seg);
	clr_bit(DISPLAY_PORT, B_seg);
	clr_bit(DISPLAY_PORT, C_seg);
	clr_bit(DISPLAY_PORT, D_seg);
	set_bit(DISPLAY_PORT, E_seg);
	set_bit(DISPLAY_PORT, F_seg);
	clr_bit(DISPLAY_PORT, G_seg);	
	}
	
}

void num4(unsigned char cont)
{
	if(cont == 3)
	{
	set_bit(DISPLAY_PORT, A_seg);
	clr_bit(DISPLAY_PORT, B_seg);
	clr_bit(DISPLAY_PORT, C_seg);
	set_bit(DISPLAY_PORT, D_seg);
	set_bit(DISPLAY_PORT, E_seg);
	clr_bit(DISPLAY_PORT, F_seg);
	clr_bit(DISPLAY_PORT, G_seg);	
	}
	
}

void num5(unsigned char cont)
{
	if(cont == 4)
	{
	clr_bit(DISPLAY_PORT, A_seg);
	set_bit(DISPLAY_PORT, B_seg);
	clr_bit(DISPLAY_PORT, C_seg);
	clr_bit(DISPLAY_PORT, D_seg);
	set_bit(DISPLAY_PORT, E_seg);
	clr_bit(DISPLAY_PORT, F_seg);
	clr_bit(DISPLAY_PORT, G_seg);	
	}
	
}

void num6(unsigned char cont)
{
	if(cont == 5)
	{
	clr_bit(DISPLAY_PORT, A_seg);
	set_bit(DISPLAY_PORT, B_seg);
	clr_bit(DISPLAY_PORT, C_seg);
	clr_bit(DISPLAY_PORT, D_seg);
	clr_bit(DISPLAY_PORT, E_seg);
	clr_bit(DISPLAY_PORT, F_seg);
	clr_bit(DISPLAY_PORT, G_seg);	
	}
	
}

void num7(unsigned char cont)
{
	if(cont == 6)
	{
	clr_bit(DISPLAY_PORT, A_seg);
	clr_bit(DISPLAY_PORT, B_seg);
	clr_bit(DISPLAY_PORT, C_seg);
	set_bit(DISPLAY_PORT, D_seg);
	set_bit(DISPLAY_PORT, E_seg);
	set_bit(DISPLAY_PORT, F_seg);
	set_bit(DISPLAY_PORT, G_seg);	
	}
	
}

void num8(unsigned char cont)
{
	if(cont == 7)
	{
	clr_bit(DISPLAY_PORT, A_seg);
	clr_bit(DISPLAY_PORT, B_seg);
	clr_bit(DISPLAY_PORT, C_seg);
	clr_bit(DISPLAY_PORT, D_seg);
	clr_bit(DISPLAY_PORT, E_seg);
	clr_bit(DISPLAY_PORT, F_seg);
	clr_bit(DISPLAY_PORT, G_seg);	
	}
	
}

void num9(unsigned char cont)
{
	if(cont == 8)
	{
	clr_bit(DISPLAY_PORT, A_seg);
	clr_bit(DISPLAY_PORT, B_seg);
	clr_bit(DISPLAY_PORT, C_seg);
	clr_bit(DISPLAY_PORT, D_seg);
	set_bit(DISPLAY_PORT, E_seg);
	clr_bit(DISPLAY_PORT, F_seg);
	clr_bit(DISPLAY_PORT, G_seg);
	}
}


