
ConversorAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000fa4  00001038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080013c  0080013c  00001074  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000195e  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000720  00000000  00000000  00002bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a1  00000000  00000000  000032f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00003b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084f  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000957  00000000  00000000  00004743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000509a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

void usartInit(uint32 baudRate)
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
	uint64 aux64;

	// Clear errors
	UCSR0A &= 0xE3;
   4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	usartConfiguration.frameError = 0;
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	usartConfiguration.bufferOverflowError = 0;
	usartConfiguration.parityError = 0;
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

	// USART configuration
	switch(usartConfiguration.mode){
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
	case 0:
		clrBit(UCSR0A, U2X0);			// Normal speed
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_14>
		clrBit(UCSR0C, UCPOL0);			// Write zero in asynchronous mode
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
		clrBit(UCSR0C, UMSEL01);		// Asynchronous mode
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
		clrBit(UCSR0C, UMSEL00);		// Asynchronous mode
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
		aux64 = F_CPU / 16 / baudRate;
  54:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
		usartConfiguration.ubrr = (uint16)(aux64 - 1);
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
		break;
  76:	a0 e0       	ldi	r26, 0x00	; 0
	case 1:
		setBit(UCSR0A, U2X0);			// Double speed
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
		clrBit(UCSR0C, UCPOL0);			// Write zero in asynchronous mode
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
		clrBit(UCSR0C, UMSEL01);		// Asynchronous mode
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
		clrBit(UCSR0C, UMSEL00);		// Asynchronous mode
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 38       	cpi	r26, 0x85	; 133
  96:	b2 07       	cpc	r27, r18
		aux64 = F_CPU / 8 / baudRate;
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
		usartConfiguration.ubrr = (uint16)(aux64 - 1);
  a6:	15 b8       	out	0x05, r1	; 5
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	1b b8       	out	0x0b, r1	; 11
  ae:	80 ef       	ldi	r24, 0xF0	; 240
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	18 b8       	out	0x08, r1	; 8
  b4:	17 b8       	out	0x07, r1	; 7
  b6:	5a 9a       	sbi	0x0b, 2	; 11
  b8:	e9 e6       	ldi	r30, 0x69	; 105
  ba:	f0 e0       	ldi	r31, 0x00	; 0
		break;
  bc:	80 81       	ld	r24, Z
	case 2:
		clrBit(UCSR0A, U2X0);			// Write zero in synchronous mode
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
		if(usartConfiguration.polarity)
  c8:	e8 9a       	sbi	0x1d, 0	; 29
  ca:	85 b5       	in	r24, 0x25	; 37
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	85 bd       	out	0x25, r24	; 37
			setBit(UCSR0C, UCPOL0);		// XCK rising edge
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	85 bd       	out	0x25, r24	; 37
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	85 bd       	out	0x25, r24	; 37
		else
			clrBit(UCSR0C, UCPOL0);		// XCK falling edge
  dc:	ee e6       	ldi	r30, 0x6E	; 110
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
		clrBit(UCSR0C, UMSEL01);		// Synchronous mode
  e6:	85 b5       	in	r24, 0x25	; 37
  e8:	87 7f       	andi	r24, 0xF7	; 247
  ea:	85 bd       	out	0x25, r24	; 37
  ec:	84 b5       	in	r24, 0x24	; 36
  ee:	82 60       	ori	r24, 0x02	; 2
		setBit(UCSR0C, UMSEL00);		// Synchronous mode
  f0:	84 bd       	out	0x24, r24	; 36
  f2:	84 b5       	in	r24, 0x24	; 36
  f4:	8e 7f       	andi	r24, 0xFE	; 254
		break;
  f6:	84 bd       	out	0x24, r24	; 36
	case 3:
		clrBit(UCSR0A, U2X0);			// Write zero in synchronous mode
  f8:	8f e0       	ldi	r24, 0x0F	; 15
  fa:	87 bd       	out	0x27, r24	; 39
  fc:	6c e7       	ldi	r22, 0x7C	; 124
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	db 01       	movw	r26, r22
		if(usartConfiguration.polarity)
 102:	8c 91       	ld	r24, X
 104:	8f 77       	andi	r24, 0x7F	; 127
 106:	8c 93       	st	X, r24
 108:	8c 91       	ld	r24, X
			setBit(UCSR0C, UCPOL0);		// XCK rising edge
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	8c 93       	st	X, r24
 10e:	c7 e7       	ldi	r28, 0x77	; 119
 110:	d1 e0       	ldi	r29, 0x01	; 1
 112:	88 81       	ld	r24, Y
 114:	8c 7f       	andi	r24, 0xFC	; 252
		else
			clrBit(UCSR0C, UCPOL0);		// XCK falling edge
 116:	81 60       	ori	r24, 0x01	; 1
 118:	88 83       	st	Y, r24
 11a:	ea e7       	ldi	r30, 0x7A	; 122
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
		setBit(UCSR0C, UMSEL01);		// Master SPI mode
 120:	84 60       	ori	r24, 0x04	; 4
 122:	80 83       	st	Z, r24
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 83       	st	Z, r24
		setBit(UCSR0C, UMSEL00);		// Master SPI mode
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
		aux64 = F_CPU / 2 / baudRate;
 130:	88 81       	ld	r24, Y
 132:	8c 61       	ori	r24, 0x1C	; 28
 134:	88 83       	st	Y, r24
 136:	80 81       	ld	r24, Z
 138:	80 62       	ori	r24, 0x20	; 32
 13a:	80 83       	st	Z, r24
		usartConfiguration.ubrr = (uint16)(aux64 - 1);
 13c:	88 81       	ld	r24, Y
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	88 83       	st	Y, r24
 142:	8b e7       	ldi	r24, 0x7B	; 123
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	dc 01       	movw	r26, r24
 148:	2c 91       	ld	r18, X
 14a:	2b 7f       	andi	r18, 0xFB	; 251
 14c:	2c 93       	st	X, r18
 14e:	2c 91       	ld	r18, X
 150:	22 60       	ori	r18, 0x02	; 2
 152:	2c 93       	st	X, r18
		break;
	}

	// Sets the baud rate
	UBRR0H = (uint8)(usartConfiguration.ubrr >> 8);
 154:	2c 91       	ld	r18, X
 156:	21 60       	ori	r18, 0x01	; 1
 158:	2c 93       	st	X, r18
 15a:	88 81       	ld	r24, Y
 15c:	80 6c       	ori	r24, 0xC0	; 192
 15e:	88 83       	st	Y, r24
	UBRR0L = (uint8)usartConfiguration.ubrr;
 160:	28 e7       	ldi	r18, 0x78	; 120
 162:	31 e0       	ldi	r19, 0x01	; 1
 164:	d9 01       	movw	r26, r18
 166:	4c 91       	ld	r20, X

	// Receiver buffer
	if(usartConfiguration.receiverBufferEnable)
 168:	84 2f       	mov	r24, r20
 16a:	8e 7f       	andi	r24, 0xFE	; 254
		usartActivateReceptionCompleteInterrupt();
 16c:	8c 93       	st	X, r24
 16e:	db 01       	movw	r26, r22
 170:	8c 91       	ld	r24, X
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	8c 93       	st	X, r24
 176:	84 2f       	mov	r24, r20
 178:	82 7c       	andi	r24, 0xC2	; 194
 17a:	d9 01       	movw	r26, r18
 17c:	8c 93       	st	X, r24
 17e:	ce e7       	ldi	r28, 0x7E	; 126
 180:	d0 e0       	ldi	r29, 0x00	; 0
	
	adcEnableAutomaticMode();
	adcTriggerTimer0CompareMatchA();	
	
	adcSelectChannel(ADC0); //adcChannel = 0 = PC0
	adcEnableDigitalInput0();
 182:	98 81       	ld	r25, Y
 184:	9e 7f       	andi	r25, 0xFE	; 254
 186:	98 83       	st	Y, r25
 188:	82 95       	swap	r24
 18a:	86 95       	lsr	r24
 18c:	86 95       	lsr	r24
 18e:	83 70       	andi	r24, 0x03	; 3
 190:	c9 e7       	ldi	r28, 0x79	; 121
 192:	d1 e0       	ldi	r29, 0x01	; 1
 194:	58 81       	ld	r21, Y
 196:	95 2f       	mov	r25, r21
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	99 0f       	add	r25, r25
 19c:	99 0f       	add	r25, r25
 19e:	89 2b       	or	r24, r25
 1a0:	98 2f       	mov	r25, r24
 1a2:	92 70       	andi	r25, 0x02	; 2
 1a4:	92 95       	swap	r25
 1a6:	99 0f       	add	r25, r25
 1a8:	99 0f       	add	r25, r25
 1aa:	90 7c       	andi	r25, 0xC0	; 192
 1ac:	42 70       	andi	r20, 0x02	; 2
 1ae:	94 2b       	or	r25, r20
 1b0:	9c 93       	st	X, r25
 1b2:	86 95       	lsr	r24
 1b4:	86 95       	lsr	r24
 1b6:	50 7f       	andi	r21, 0xF0	; 240
 1b8:	85 2b       	or	r24, r21
 1ba:	88 83       	st	Y, r24
	
	adcResultRightAdjust();
 1bc:	db 01       	movw	r26, r22
 1be:	4c 91       	ld	r20, X
 1c0:	4f 7d       	andi	r20, 0xDF	; 223
 1c2:	4c 93       	st	X, r20
 1c4:	9d 7f       	andi	r25, 0xFD	; 253
 1c6:	d9 01       	movw	r26, r18
 1c8:	9c 93       	st	X, r25
	
	adcEnable();
 1ca:	90 81       	ld	r25, Z
 1cc:	90 68       	ori	r25, 0x80	; 128
 1ce:	90 83       	st	Z, r25
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	88 83       	st	Y, r24
		
	adcActivateInterrupt();
 1d4:	90 81       	ld	r25, Z
 1d6:	98 60       	ori	r25, 0x08	; 8
 1d8:	90 83       	st	Z, r25
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	88 83       	st	Y, r24
	
	adcStartConversion();
 1de:	80 81       	ld	r24, Z
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	80 83       	st	Z, r24
	
	lcdStdio();
 1e4:	ef e7       	ldi	r30, 0x7F	; 127
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	95 83       	std	Z+5, r25	; 0x05
 1ee:	84 83       	std	Z+4, r24	; 0x04
 1f0:	93 83       	std	Z+3, r25	; 0x03
 1f2:	82 83       	std	Z+2, r24	; 0x02
 1f4:	91 83       	std	Z+1, r25	; 0x01
 1f6:	80 83       	st	Z, r24
	lcdInit();
 1f8:	0e 94 2f 02 	call	0x45e	; 0x45e <lcdInit>
	lcdDisplayOn();
 1fc:	ee e7       	ldi	r30, 0x7E	; 126
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	90 81       	ld	r25, Z
 202:	91 60       	ori	r25, 0x01	; 1
 204:	90 83       	st	Z, r25
 206:	92 fb       	bst	r25, 2
 208:	88 27       	eor	r24, r24
 20a:	80 f9       	bld	r24, 0
 20c:	8c 60       	ori	r24, 0x0C	; 12
 20e:	92 70       	andi	r25, 0x02	; 2
 210:	89 2b       	or	r24, r25
 212:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
		
	sei();
 216:	78 94       	sei
    while(1)
    {
       switch (estado)
	   {
		   case 0:
		   printf("Sensor de\nTemperatura");
 218:	0f 2e       	mov	r0, r31
 21a:	f1 e1       	ldi	r31, 0x11	; 17
 21c:	ef 2e       	mov	r14, r31
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	ff 2e       	mov	r15, r31
 222:	f0 2d       	mov	r31, r0
		   _delay_ms(20);
		   lcdClearScreen();
 224:	cd e7       	ldi	r28, 0x7D	; 125
 226:	d1 e0       	ldi	r29, 0x01	; 1
		   printf("Temperatura:\n");
		   estado = 1;
		   break;
		   
		   case 1:
		   lcdCursorMoveFirstLine();
 228:	68 94       	set
 22a:	dd 24       	eor	r13, r13
 22c:	d2 f8       	bld	r13, 2
		   lcdCursorMoveNextLine();
		   printf("%d  %c", temperatura, escala);
 22e:	04 e3       	ldi	r16, 0x34	; 52
 230:	11 e0       	ldi	r17, 0x01	; 1
	sei();
	
	
    while(1)
    {
       switch (estado)
 232:	80 91 3c 01 	lds	r24, 0x013C
 236:	88 23       	and	r24, r24
 238:	19 f0       	breq	.+6      	; 0x240 <main+0x19a>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	e1 f0       	breq	.+56     	; 0x276 <main+0x1d0>
 23e:	f9 cf       	rjmp	.-14     	; 0x232 <main+0x18c>
	   {
		   case 0:
		   printf("Sensor de\nTemperatura");
 240:	ff 92       	push	r15
 242:	ef 92       	push	r14
 244:	0e 94 d5 04 	call	0x9aa	; 0x9aa <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	bf ef       	ldi	r27, 0xFF	; 255
 24a:	e9 ef       	ldi	r30, 0xF9	; 249
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	b1 50       	subi	r27, 0x01	; 1
 250:	e0 40       	sbci	r30, 0x00	; 0
 252:	f0 40       	sbci	r31, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x1a8>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x1b2>
 258:	00 00       	nop
		   _delay_ms(20);
		   lcdClearScreen();
 25a:	18 82       	st	Y, r1
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
		   printf("Temperatura:\n");
 262:	87 e2       	ldi	r24, 0x27	; 39
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <puts>
		   estado = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 3c 01 	sts	0x013C, r24
		   break;
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	de cf       	rjmp	.-68     	; 0x232 <main+0x18c>
		   
		   case 1:
		   lcdCursorMoveFirstLine();
 276:	d8 82       	st	Y, r13
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
		   lcdCursorMoveNextLine();
 27e:	88 81       	ld	r24, Y
 280:	83 70       	andi	r24, 0x03	; 3
 282:	41 f4       	brne	.+16     	; 0x294 <main+0x1ee>
 284:	88 81       	ld	r24, Y
 286:	8c 7f       	andi	r24, 0xFC	; 252
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	88 83       	st	Y, r24
 28c:	80 ec       	ldi	r24, 0xC0	; 192
 28e:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <main+0x1fa>
 294:	88 81       	ld	r24, Y
 296:	8c 7f       	andi	r24, 0xFC	; 252
 298:	88 83       	st	Y, r24
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
 2a0:	88 81       	ld	r24, Y
 2a2:	83 70       	andi	r24, 0x03	; 3
 2a4:	88 83       	st	Y, r24
		   printf("%d  %c", temperatura, escala);
 2a6:	20 91 02 01 	lds	r18, 0x0102
 2aa:	80 91 3d 01 	lds	r24, 0x013D
 2ae:	90 91 3e 01 	lds	r25, 0x013E
 2b2:	1f 92       	push	r1
 2b4:	2f 93       	push	r18
 2b6:	9f 93       	push	r25
 2b8:	8f 93       	push	r24
 2ba:	1f 93       	push	r17
 2bc:	0f 93       	push	r16
 2be:	0e 94 d5 04 	call	0x9aa	; 0x9aa <printf>
		   break;
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	b1 cf       	rjmp	.-158    	; 0x232 <main+0x18c>

000002d0 <__vector_1>:
    }
	}
}

ISR(INT0_vect)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
	
	if(escala == 'C')
 2e0:	80 91 02 01 	lds	r24, 0x0102
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <__vector_1+0x20>
	{
		escala = 'F';
 2e8:	86 e4       	ldi	r24, 0x46	; 70
 2ea:	80 93 02 01 	sts	0x0102, r24
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <__vector_1+0x2e>
	}
	
	else if (escala == 'F')
 2f0:	80 91 02 01 	lds	r24, 0x0102
 2f4:	86 34       	cpi	r24, 0x46	; 70
 2f6:	19 f4       	brne	.+6      	; 0x2fe <__vector_1+0x2e>
	{
		escala = 'C';
 2f8:	83 e4       	ldi	r24, 0x43	; 67
 2fa:	80 93 02 01 	sts	0x0102, r24
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	89 ef       	ldi	r24, 0xF9	; 249
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <__vector_1+0x34>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <__vector_1+0x3e>
 30e:	00 00       	nop
	}
	
	_delay_ms(20);
}
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	2f 91       	pop	r18
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
	
}
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__vector_21>:

ISR(ADC_vect)
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
	temp_LM35 = ADC*500/1024;
 356:	40 91 78 00 	lds	r20, 0x0078
 35a:	50 91 79 00 	lds	r21, 0x0079
 35e:	24 ef       	ldi	r18, 0xF4	; 244
 360:	31 e0       	ldi	r19, 0x01	; 1
 362:	42 9f       	mul	r20, r18
 364:	c0 01       	movw	r24, r0
 366:	43 9f       	mul	r20, r19
 368:	90 0d       	add	r25, r0
 36a:	52 9f       	mul	r21, r18
 36c:	90 0d       	add	r25, r0
 36e:	11 24       	eor	r1, r1
 370:	89 2f       	mov	r24, r25
 372:	99 27       	eor	r25, r25
 374:	86 95       	lsr	r24
 376:	86 95       	lsr	r24
 378:	90 93 01 01 	sts	0x0101, r25
 37c:	80 93 00 01 	sts	0x0100, r24
	
	if (escala == 'F')
 380:	80 91 02 01 	lds	r24, 0x0102
 384:	86 34       	cpi	r24, 0x46	; 70
 386:	e9 f4       	brne	.+58     	; 0x3c2 <__vector_21+0x8e>
	{
		temperatura = (temp_LM35 * 1.8) + 32;
 388:	60 91 00 01 	lds	r22, 0x0100
 38c:	70 91 01 01 	lds	r23, 0x0101
 390:	07 2e       	mov	r0, r23
 392:	00 0c       	add	r0, r0
 394:	88 0b       	sbc	r24, r24
 396:	99 0b       	sbc	r25, r25
 398:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__floatsisf>
 39c:	26 e6       	ldi	r18, 0x66	; 102
 39e:	36 e6       	ldi	r19, 0x66	; 102
 3a0:	46 ee       	ldi	r20, 0xE6	; 230
 3a2:	5f e3       	ldi	r21, 0x3F	; 63
 3a4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	52 e4       	ldi	r21, 0x42	; 66
 3b0:	0e 94 38 03 	call	0x670	; 0x670 <__addsf3>
 3b4:	0e 94 a4 03 	call	0x748	; 0x748 <__fixsfsi>
 3b8:	70 93 3e 01 	sts	0x013E, r23
 3bc:	60 93 3d 01 	sts	0x013D, r22
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <__vector_21+0xa6>
	}
	
	else if(escala == 'C')
 3c2:	80 91 02 01 	lds	r24, 0x0102
 3c6:	83 34       	cpi	r24, 0x43	; 67
 3c8:	41 f4       	brne	.+16     	; 0x3da <__vector_21+0xa6>
	{
		temperatura = temp_LM35;
 3ca:	80 91 00 01 	lds	r24, 0x0100
 3ce:	90 91 01 01 	lds	r25, 0x0101
 3d2:	90 93 3e 01 	sts	0x013E, r25
 3d6:	80 93 3d 01 	sts	0x013D, r24
	}
	
	adcWaitConversionFinish();
 3da:	ea e7       	ldi	r30, 0x7A	; 122
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	86 fd       	sbrc	r24, 6
 3e2:	fd cf       	rjmp	.-6      	; 0x3de <__vector_21+0xaa>
	adcClearInterruptRequest();
 3e4:	ea e7       	ldi	r30, 0x7A	; 122
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	80 61       	ori	r24, 0x10	; 16
 3ec:	80 83       	st	Z, r24
	
}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <lcdCommand>:

void lcdCommand(int8 command)
{
	uint8 i = 2;

	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((command >> 4) << LCD_DATA_D4);
 410:	95 b1       	in	r25, 0x05	; 5
 412:	28 2f       	mov	r18, r24
 414:	22 95       	swap	r18
 416:	2f 70       	andi	r18, 0x0F	; 15
 418:	90 7f       	andi	r25, 0xF0	; 240
 41a:	92 2b       	or	r25, r18
 41c:	95 b9       	out	0x05, r25	; 5
 41e:	22 e0       	ldi	r18, 0x02	; 2
		_delay_us(1);
		clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
		_delay_us(45);
		if(command < 4)
			_delay_ms(2);
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((command & 0x0F) << LCD_DATA_D4);
 420:	38 2f       	mov	r19, r24
 422:	3f 70       	andi	r19, 0x0F	; 15
{
	uint8 i = 2;

	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((command >> 4) << LCD_DATA_D4);
	do{
		clrBit(LCD_CONTROL_PORT, LCD_CONTROL_RS);
 424:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 426:	95 e0       	ldi	r25, 0x05	; 5
 428:	9a 95       	dec	r25
 42a:	f1 f7       	brne	.-4      	; 0x428 <lcdCommand+0x18>
 42c:	00 00       	nop
		_delay_us(1);
		setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 42e:	2c 9a       	sbi	0x05, 4	; 5
 430:	e5 e0       	ldi	r30, 0x05	; 5
 432:	ea 95       	dec	r30
 434:	f1 f7       	brne	.-4      	; 0x432 <lcdCommand+0x22>
 436:	00 00       	nop
		_delay_us(1);
		clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 438:	2c 98       	cbi	0x05, 4	; 5
 43a:	f0 ef       	ldi	r31, 0xF0	; 240
 43c:	fa 95       	dec	r31
 43e:	f1 f7       	brne	.-4      	; 0x43c <lcdCommand+0x2c>
		_delay_us(45);
		if(command < 4)
 440:	84 30       	cpi	r24, 0x04	; 4
 442:	30 f4       	brcc	.+12     	; 0x450 <lcdCommand+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 444:	ef e3       	ldi	r30, 0x3F	; 63
 446:	ff e1       	ldi	r31, 0x1F	; 31
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <lcdCommand+0x38>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <lcdCommand+0x3e>
 44e:	00 00       	nop
			_delay_ms(2);
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((command & 0x0F) << LCD_DATA_D4);
 450:	95 b1       	in	r25, 0x05	; 5
 452:	90 7f       	andi	r25, 0xF0	; 240
 454:	93 2b       	or	r25, r19
 456:	95 b9       	out	0x05, r25	; 5
 458:	21 50       	subi	r18, 0x01	; 1
		i--;
	}while(i > 0);
 45a:	21 f7       	brne	.-56     	; 0x424 <lcdCommand+0x14>
	return;
}
 45c:	08 95       	ret

0000045e <lcdInit>:
/* -----------------------------------------------------------------------------
 * Performs LCD module initialization.
 * -------------------------------------------------------------------------- */

void lcdInit(void)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
	lcdIOConfigure();
 462:	85 b1       	in	r24, 0x05	; 5
 464:	80 7f       	andi	r24, 0xF0	; 240
 466:	85 b9       	out	0x05, r24	; 5
 468:	84 b1       	in	r24, 0x04	; 4
 46a:	8f 60       	ori	r24, 0x0F	; 15
 46c:	84 b9       	out	0x04, r24	; 4
 46e:	85 b1       	in	r24, 0x05	; 5
 470:	8f 78       	andi	r24, 0x8F	; 143
 472:	85 b9       	out	0x05, r24	; 5
 474:	84 b1       	in	r24, 0x04	; 4
 476:	80 67       	ori	r24, 0x70	; 112
 478:	84 b9       	out	0x04, r24	; 4
	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | (0x03 << LCD_DATA_D4);
 47a:	85 b1       	in	r24, 0x05	; 5
 47c:	80 7f       	andi	r24, 0xF0	; 240
 47e:	83 60       	ori	r24, 0x03	; 3
 480:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	8a 95       	dec	r24
 486:	f1 f7       	brne	.-4      	; 0x484 <lcdInit+0x26>
 488:	00 00       	nop
	_delay_us(1);
	setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 48a:	2c 9a       	sbi	0x05, 4	; 5
 48c:	95 e0       	ldi	r25, 0x05	; 5
 48e:	9a 95       	dec	r25
 490:	f1 f7       	brne	.-4      	; 0x48e <lcdInit+0x30>
 492:	00 00       	nop
	_delay_us(1);
	clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 494:	2c 98       	cbi	0x05, 4	; 5
 496:	80 ef       	ldi	r24, 0xF0	; 240
 498:	8a 95       	dec	r24
 49a:	f1 f7       	brne	.-4      	; 0x498 <lcdInit+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49c:	8f e1       	ldi	r24, 0x1F	; 31
 49e:	9e e4       	ldi	r25, 0x4E	; 78
 4a0:	01 97       	sbiw	r24, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <lcdInit+0x42>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <lcdInit+0x48>
 4a6:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a8:	95 e0       	ldi	r25, 0x05	; 5
 4aa:	9a 95       	dec	r25
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <lcdInit+0x4c>
 4ae:	00 00       	nop
	_delay_us(45);
	_delay_ms(5);
	_delay_us(1);
	setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 4b0:	2c 9a       	sbi	0x05, 4	; 5
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	8a 95       	dec	r24
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <lcdInit+0x56>
 4b8:	00 00       	nop
	_delay_us(1);
	clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 4ba:	2c 98       	cbi	0x05, 4	; 5
 4bc:	90 ef       	ldi	r25, 0xF0	; 240
 4be:	9a 95       	dec	r25
 4c0:	f1 f7       	brne	.-4      	; 0x4be <lcdInit+0x60>
 4c2:	8f e1       	ldi	r24, 0x1F	; 31
 4c4:	93 e0       	ldi	r25, 0x03	; 3
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <lcdInit+0x68>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <lcdInit+0x6e>
 4cc:	00 00       	nop
 4ce:	95 e0       	ldi	r25, 0x05	; 5
 4d0:	9a 95       	dec	r25
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <lcdInit+0x72>
 4d4:	00 00       	nop
	_delay_us(45);
	_delay_us(200);
	_delay_us(1);
	setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 4d6:	2c 9a       	sbi	0x05, 4	; 5
 4d8:	85 e0       	ldi	r24, 0x05	; 5
 4da:	8a 95       	dec	r24
 4dc:	f1 f7       	brne	.-4      	; 0x4da <lcdInit+0x7c>
 4de:	00 00       	nop
	_delay_us(1);
	clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 4e0:	2c 98       	cbi	0x05, 4	; 5
 4e2:	90 ef       	ldi	r25, 0xF0	; 240
 4e4:	9a 95       	dec	r25
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <lcdInit+0x86>
	_delay_us(45);
	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | (0x02 << LCD_DATA_D4);
 4e8:	85 b1       	in	r24, 0x05	; 5
 4ea:	80 7f       	andi	r24, 0xF0	; 240
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	85 b9       	out	0x05, r24	; 5
 4f0:	85 e0       	ldi	r24, 0x05	; 5
 4f2:	8a 95       	dec	r24
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <lcdInit+0x94>
 4f6:	00 00       	nop
	_delay_us(1);
	setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 4f8:	2c 9a       	sbi	0x05, 4	; 5
 4fa:	95 e0       	ldi	r25, 0x05	; 5
 4fc:	9a 95       	dec	r25
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <lcdInit+0x9e>
 500:	00 00       	nop
	_delay_us(1);
	clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 502:	2c 98       	cbi	0x05, 4	; 5
 504:	80 ef       	ldi	r24, 0xF0	; 240
 506:	8a 95       	dec	r24
 508:	f1 f7       	brne	.-4      	; 0x506 <lcdInit+0xa8>
	_delay_us(45);
	lcdCommand(0x28);
 50a:	88 e2       	ldi	r24, 0x28	; 40
 50c:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
	lcdCommand(0x08);
 510:	88 e0       	ldi	r24, 0x08	; 8
 512:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
   	lcdClearScreen();
 516:	cd e7       	ldi	r28, 0x7D	; 125
 518:	d1 e0       	ldi	r29, 0x01	; 1
 51a:	18 82       	st	Y, r1
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
   	lcdDisplayOn();   
 522:	ee e7       	ldi	r30, 0x7E	; 126
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	90 81       	ld	r25, Z
 528:	91 60       	ori	r25, 0x01	; 1
 52a:	90 83       	st	Z, r25
 52c:	92 fb       	bst	r25, 2
 52e:	88 27       	eor	r24, r24
 530:	80 f9       	bld	r24, 0
 532:	8c 60       	ori	r24, 0x0C	; 12
 534:	92 70       	andi	r25, 0x02	; 2
 536:	89 2b       	or	r24, r25
 538:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
   	lcdCursorMoveFirstLine();
 53c:	84 e0       	ldi	r24, 0x04	; 4
 53e:	88 83       	st	Y, r24
 540:	80 e8       	ldi	r24, 0x80	; 128
 542:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
	return;
}
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <lcdWrite>:

void lcdWrite(int8 character)
{
	uint8 i = 2;

	if(character == '\n')
 54c:	8a 30       	cpi	r24, 0x0A	; 10
 54e:	e1 f4       	brne	.+56     	; 0x588 <lcdWrite+0x3c>
		lcdCursorMoveNextLine();
 550:	80 91 7d 01 	lds	r24, 0x017D
 554:	83 70       	andi	r24, 0x03	; 3
 556:	51 f4       	brne	.+20     	; 0x56c <lcdWrite+0x20>
 558:	ed e7       	ldi	r30, 0x7D	; 125
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	80 81       	ld	r24, Z
 55e:	8c 7f       	andi	r24, 0xFC	; 252
 560:	81 60       	ori	r24, 0x01	; 1
 562:	80 83       	st	Z, r24
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
 56a:	08 c0       	rjmp	.+16     	; 0x57c <lcdWrite+0x30>
 56c:	ed e7       	ldi	r30, 0x7D	; 125
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	80 81       	ld	r24, Z
 572:	8c 7f       	andi	r24, 0xFC	; 252
 574:	80 83       	st	Z, r24
 576:	80 e8       	ldi	r24, 0x80	; 128
 578:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
 57c:	ed e7       	ldi	r30, 0x7D	; 125
 57e:	f1 e0       	ldi	r31, 0x01	; 1
 580:	80 81       	ld	r24, Z
 582:	83 70       	andi	r24, 0x03	; 3
 584:	80 83       	st	Z, r24
 586:	08 95       	ret
	else{
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character >> 4) << LCD_DATA_D4);
 588:	95 b1       	in	r25, 0x05	; 5
 58a:	28 2f       	mov	r18, r24
 58c:	22 95       	swap	r18
 58e:	2f 70       	andi	r18, 0x0F	; 15
 590:	90 7f       	andi	r25, 0xF0	; 240
 592:	92 2b       	or	r25, r18
 594:	95 b9       	out	0x05, r25	; 5
 596:	22 e0       	ldi	r18, 0x02	; 2
			_delay_us(1);
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
			_delay_us(1);
			clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
			_delay_us(45);
			LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character & 0x0F) << LCD_DATA_D4);
 598:	8f 70       	andi	r24, 0x0F	; 15
	if(character == '\n')
		lcdCursorMoveNextLine();
	else{
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character >> 4) << LCD_DATA_D4);
		do{
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_RS);
 59a:	2d 9a       	sbi	0x05, 5	; 5
 59c:	95 e0       	ldi	r25, 0x05	; 5
 59e:	9a 95       	dec	r25
 5a0:	f1 f7       	brne	.-4      	; 0x59e <lcdWrite+0x52>
 5a2:	00 00       	nop
			_delay_us(1);
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 5a4:	2c 9a       	sbi	0x05, 4	; 5
 5a6:	95 e0       	ldi	r25, 0x05	; 5
 5a8:	9a 95       	dec	r25
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcdWrite+0x5c>
 5ac:	00 00       	nop
			_delay_us(1);
			clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 5ae:	2c 98       	cbi	0x05, 4	; 5
 5b0:	90 ef       	ldi	r25, 0xF0	; 240
 5b2:	9a 95       	dec	r25
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <lcdWrite+0x66>
			_delay_us(45);
			LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character & 0x0F) << LCD_DATA_D4);
 5b6:	95 b1       	in	r25, 0x05	; 5
 5b8:	90 7f       	andi	r25, 0xF0	; 240
 5ba:	98 2b       	or	r25, r24
 5bc:	95 b9       	out	0x05, r25	; 5
 5be:	21 50       	subi	r18, 0x01	; 1
			i--;
		}while(i > 0);
 5c0:	61 f7       	brne	.-40     	; 0x59a <lcdWrite+0x4e>
 5c2:	08 95       	ret

000005c4 <lcdWriteStd>:
/* -----------------------------------------------------------------------------
 * Writes a character on the display using the standard output handler.
 * -------------------------------------------------------------------------- */

int16 lcdWriteStd(int8 character, FILE * stream)
{
 5c4:	cf 93       	push	r28
	uint8 i = 2;

	if(character == '\n'){
 5c6:	8a 30       	cpi	r24, 0x0A	; 10
 5c8:	41 f5       	brne	.+80     	; 0x61a <lcdWriteStd+0x56>
		for(i = lcdConfiguration.column;i < (LCD_COLUMNS);i++)
 5ca:	c0 91 7d 01 	lds	r28, 0x017D
 5ce:	c6 95       	lsr	r28
 5d0:	c6 95       	lsr	r28
 5d2:	c0 31       	cpi	r28, 0x10	; 16
 5d4:	30 f4       	brcc	.+12     	; 0x5e2 <lcdWriteStd+0x1e>
			lcdWrite(' ');
 5d6:	80 e2       	ldi	r24, 0x20	; 32
 5d8:	0e 94 a6 02 	call	0x54c	; 0x54c <lcdWrite>
int16 lcdWriteStd(int8 character, FILE * stream)
{
	uint8 i = 2;

	if(character == '\n'){
		for(i = lcdConfiguration.column;i < (LCD_COLUMNS);i++)
 5dc:	cf 5f       	subi	r28, 0xFF	; 255
 5de:	c0 31       	cpi	r28, 0x10	; 16
 5e0:	d1 f7       	brne	.-12     	; 0x5d6 <lcdWriteStd+0x12>
			lcdWrite(' ');
		lcdCursorMoveNextLine();
 5e2:	80 91 7d 01 	lds	r24, 0x017D
 5e6:	83 70       	andi	r24, 0x03	; 3
 5e8:	51 f4       	brne	.+20     	; 0x5fe <lcdWriteStd+0x3a>
 5ea:	ed e7       	ldi	r30, 0x7D	; 125
 5ec:	f1 e0       	ldi	r31, 0x01	; 1
 5ee:	80 81       	ld	r24, Z
 5f0:	8c 7f       	andi	r24, 0xFC	; 252
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	80 83       	st	Z, r24
 5f6:	80 ec       	ldi	r24, 0xC0	; 192
 5f8:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <lcdWriteStd+0x4a>
 5fe:	ed e7       	ldi	r30, 0x7D	; 125
 600:	f1 e0       	ldi	r31, 0x01	; 1
 602:	80 81       	ld	r24, Z
 604:	8c 7f       	andi	r24, 0xFC	; 252
 606:	80 83       	st	Z, r24
 608:	80 e8       	ldi	r24, 0x80	; 128
 60a:	0e 94 08 02 	call	0x410	; 0x410 <lcdCommand>
 60e:	ed e7       	ldi	r30, 0x7D	; 125
 610:	f1 e0       	ldi	r31, 0x01	; 1
 612:	80 81       	ld	r24, Z
 614:	83 70       	andi	r24, 0x03	; 3
 616:	80 83       	st	Z, r24
 618:	26 c0       	rjmp	.+76     	; 0x666 <lcdWriteStd+0xa2>
	}else{
		lcdConfiguration.column++;
 61a:	ed e7       	ldi	r30, 0x7D	; 125
 61c:	f1 e0       	ldi	r31, 0x01	; 1
 61e:	90 81       	ld	r25, Z
 620:	29 2f       	mov	r18, r25
 622:	2c 7f       	andi	r18, 0xFC	; 252
 624:	2c 5f       	subi	r18, 0xFC	; 252
 626:	93 70       	andi	r25, 0x03	; 3
 628:	92 2b       	or	r25, r18
 62a:	90 83       	st	Z, r25
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character >> 4) << LCD_DATA_D4);
 62c:	95 b1       	in	r25, 0x05	; 5
 62e:	28 2f       	mov	r18, r24
 630:	22 95       	swap	r18
 632:	2f 70       	andi	r18, 0x0F	; 15
 634:	90 7f       	andi	r25, 0xF0	; 240
 636:	92 2b       	or	r25, r18
 638:	95 b9       	out	0x05, r25	; 5
 63a:	22 e0       	ldi	r18, 0x02	; 2
			_delay_us(1);
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
			_delay_us(1);
			clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
			_delay_us(45);
			LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character & 0x0F) << LCD_DATA_D4);
 63c:	8f 70       	andi	r24, 0x0F	; 15
		lcdCursorMoveNextLine();
	}else{
		lcdConfiguration.column++;
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character >> 4) << LCD_DATA_D4);
		do{
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_RS);
 63e:	2d 9a       	sbi	0x05, 5	; 5
 640:	95 e0       	ldi	r25, 0x05	; 5
 642:	9a 95       	dec	r25
 644:	f1 f7       	brne	.-4      	; 0x642 <lcdWriteStd+0x7e>
 646:	00 00       	nop
			_delay_us(1);
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 648:	2c 9a       	sbi	0x05, 4	; 5
 64a:	95 e0       	ldi	r25, 0x05	; 5
 64c:	9a 95       	dec	r25
 64e:	f1 f7       	brne	.-4      	; 0x64c <lcdWriteStd+0x88>
 650:	00 00       	nop
			_delay_us(1);
			clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 652:	2c 98       	cbi	0x05, 4	; 5
 654:	90 ef       	ldi	r25, 0xF0	; 240
 656:	9a 95       	dec	r25
 658:	f1 f7       	brne	.-4      	; 0x656 <lcdWriteStd+0x92>
			_delay_us(45);
			LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character & 0x0F) << LCD_DATA_D4);
 65a:	95 b1       	in	r25, 0x05	; 5
 65c:	90 7f       	andi	r25, 0xF0	; 240
 65e:	98 2b       	or	r25, r24
 660:	95 b9       	out	0x05, r25	; 5
 662:	21 50       	subi	r18, 0x01	; 1
			i--;
		}while(i > 0);
 664:	61 f7       	brne	.-40     	; 0x63e <lcdWriteStd+0x7a>
	}
	return 0;
}
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <__subsf3>:
 66e:	50 58       	subi	r21, 0x80	; 128

00000670 <__addsf3>:
 670:	bb 27       	eor	r27, r27
 672:	aa 27       	eor	r26, r26
 674:	0e 94 4f 03 	call	0x69e	; 0x69e <__addsf3x>
 678:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_round>
 67c:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscA>
 680:	38 f0       	brcs	.+14     	; 0x690 <__addsf3+0x20>
 682:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_pscB>
 686:	20 f0       	brcs	.+8      	; 0x690 <__addsf3+0x20>
 688:	39 f4       	brne	.+14     	; 0x698 <__addsf3+0x28>
 68a:	9f 3f       	cpi	r25, 0xFF	; 255
 68c:	19 f4       	brne	.+6      	; 0x694 <__addsf3+0x24>
 68e:	26 f4       	brtc	.+8      	; 0x698 <__addsf3+0x28>
 690:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>
 694:	0e f4       	brtc	.+2      	; 0x698 <__addsf3+0x28>
 696:	e0 95       	com	r30
 698:	e7 fb       	bst	r30, 7
 69a:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>

0000069e <__addsf3x>:
 69e:	e9 2f       	mov	r30, r25
 6a0:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_split3>
 6a4:	58 f3       	brcs	.-42     	; 0x67c <__addsf3+0xc>
 6a6:	ba 17       	cp	r27, r26
 6a8:	62 07       	cpc	r22, r18
 6aa:	73 07       	cpc	r23, r19
 6ac:	84 07       	cpc	r24, r20
 6ae:	95 07       	cpc	r25, r21
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <__addsf3x+0x1c>
 6b2:	79 f4       	brne	.+30     	; 0x6d2 <__addsf3x+0x34>
 6b4:	a6 f5       	brtc	.+104    	; 0x71e <__addsf3x+0x80>
 6b6:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_zero>
 6ba:	0e f4       	brtc	.+2      	; 0x6be <__addsf3x+0x20>
 6bc:	e0 95       	com	r30
 6be:	0b 2e       	mov	r0, r27
 6c0:	ba 2f       	mov	r27, r26
 6c2:	a0 2d       	mov	r26, r0
 6c4:	0b 01       	movw	r0, r22
 6c6:	b9 01       	movw	r22, r18
 6c8:	90 01       	movw	r18, r0
 6ca:	0c 01       	movw	r0, r24
 6cc:	ca 01       	movw	r24, r20
 6ce:	a0 01       	movw	r20, r0
 6d0:	11 24       	eor	r1, r1
 6d2:	ff 27       	eor	r31, r31
 6d4:	59 1b       	sub	r21, r25
 6d6:	99 f0       	breq	.+38     	; 0x6fe <__addsf3x+0x60>
 6d8:	59 3f       	cpi	r21, 0xF9	; 249
 6da:	50 f4       	brcc	.+20     	; 0x6f0 <__addsf3x+0x52>
 6dc:	50 3e       	cpi	r21, 0xE0	; 224
 6de:	68 f1       	brcs	.+90     	; 0x73a <__addsf3x+0x9c>
 6e0:	1a 16       	cp	r1, r26
 6e2:	f0 40       	sbci	r31, 0x00	; 0
 6e4:	a2 2f       	mov	r26, r18
 6e6:	23 2f       	mov	r18, r19
 6e8:	34 2f       	mov	r19, r20
 6ea:	44 27       	eor	r20, r20
 6ec:	58 5f       	subi	r21, 0xF8	; 248
 6ee:	f3 cf       	rjmp	.-26     	; 0x6d6 <__addsf3x+0x38>
 6f0:	46 95       	lsr	r20
 6f2:	37 95       	ror	r19
 6f4:	27 95       	ror	r18
 6f6:	a7 95       	ror	r26
 6f8:	f0 40       	sbci	r31, 0x00	; 0
 6fa:	53 95       	inc	r21
 6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__addsf3x+0x52>
 6fe:	7e f4       	brtc	.+30     	; 0x71e <__addsf3x+0x80>
 700:	1f 16       	cp	r1, r31
 702:	ba 0b       	sbc	r27, r26
 704:	62 0b       	sbc	r22, r18
 706:	73 0b       	sbc	r23, r19
 708:	84 0b       	sbc	r24, r20
 70a:	ba f0       	brmi	.+46     	; 0x73a <__addsf3x+0x9c>
 70c:	91 50       	subi	r25, 0x01	; 1
 70e:	a1 f0       	breq	.+40     	; 0x738 <__addsf3x+0x9a>
 710:	ff 0f       	add	r31, r31
 712:	bb 1f       	adc	r27, r27
 714:	66 1f       	adc	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	c2 f7       	brpl	.-16     	; 0x70c <__addsf3x+0x6e>
 71c:	0e c0       	rjmp	.+28     	; 0x73a <__addsf3x+0x9c>
 71e:	ba 0f       	add	r27, r26
 720:	62 1f       	adc	r22, r18
 722:	73 1f       	adc	r23, r19
 724:	84 1f       	adc	r24, r20
 726:	48 f4       	brcc	.+18     	; 0x73a <__addsf3x+0x9c>
 728:	87 95       	ror	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f7 95       	ror	r31
 732:	9e 3f       	cpi	r25, 0xFE	; 254
 734:	08 f0       	brcs	.+2      	; 0x738 <__addsf3x+0x9a>
 736:	b0 cf       	rjmp	.-160    	; 0x698 <__addsf3+0x28>
 738:	93 95       	inc	r25
 73a:	88 0f       	add	r24, r24
 73c:	08 f0       	brcs	.+2      	; 0x740 <__addsf3x+0xa2>
 73e:	99 27       	eor	r25, r25
 740:	ee 0f       	add	r30, r30
 742:	97 95       	ror	r25
 744:	87 95       	ror	r24
 746:	08 95       	ret

00000748 <__fixsfsi>:
 748:	0e 94 ab 03 	call	0x756	; 0x756 <__fixunssfsi>
 74c:	68 94       	set
 74e:	b1 11       	cpse	r27, r1
 750:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>
 754:	08 95       	ret

00000756 <__fixunssfsi>:
 756:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_splitA>
 75a:	88 f0       	brcs	.+34     	; 0x77e <__fixunssfsi+0x28>
 75c:	9f 57       	subi	r25, 0x7F	; 127
 75e:	98 f0       	brcs	.+38     	; 0x786 <__fixunssfsi+0x30>
 760:	b9 2f       	mov	r27, r25
 762:	99 27       	eor	r25, r25
 764:	b7 51       	subi	r27, 0x17	; 23
 766:	b0 f0       	brcs	.+44     	; 0x794 <__fixunssfsi+0x3e>
 768:	e1 f0       	breq	.+56     	; 0x7a2 <__fixunssfsi+0x4c>
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	1a f0       	brmi	.+6      	; 0x77a <__fixunssfsi+0x24>
 774:	ba 95       	dec	r27
 776:	c9 f7       	brne	.-14     	; 0x76a <__fixunssfsi+0x14>
 778:	14 c0       	rjmp	.+40     	; 0x7a2 <__fixunssfsi+0x4c>
 77a:	b1 30       	cpi	r27, 0x01	; 1
 77c:	91 f0       	breq	.+36     	; 0x7a2 <__fixunssfsi+0x4c>
 77e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_zero>
 782:	b1 e0       	ldi	r27, 0x01	; 1
 784:	08 95       	ret
 786:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_zero>
 78a:	67 2f       	mov	r22, r23
 78c:	78 2f       	mov	r23, r24
 78e:	88 27       	eor	r24, r24
 790:	b8 5f       	subi	r27, 0xF8	; 248
 792:	39 f0       	breq	.+14     	; 0x7a2 <__fixunssfsi+0x4c>
 794:	b9 3f       	cpi	r27, 0xF9	; 249
 796:	cc f3       	brlt	.-14     	; 0x78a <__fixunssfsi+0x34>
 798:	86 95       	lsr	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b3 95       	inc	r27
 7a0:	d9 f7       	brne	.-10     	; 0x798 <__fixunssfsi+0x42>
 7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__fixunssfsi+0x5c>
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__floatunsisf>:
 7b4:	e8 94       	clt
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <__floatsisf+0x12>

000007b8 <__floatsisf>:
 7b8:	97 fb       	bst	r25, 7
 7ba:	3e f4       	brtc	.+14     	; 0x7ca <__floatsisf+0x12>
 7bc:	90 95       	com	r25
 7be:	80 95       	com	r24
 7c0:	70 95       	com	r23
 7c2:	61 95       	neg	r22
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	8f 4f       	sbci	r24, 0xFF	; 255
 7c8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ca:	99 23       	and	r25, r25
 7cc:	a9 f0       	breq	.+42     	; 0x7f8 <__floatsisf+0x40>
 7ce:	f9 2f       	mov	r31, r25
 7d0:	96 e9       	ldi	r25, 0x96	; 150
 7d2:	bb 27       	eor	r27, r27
 7d4:	93 95       	inc	r25
 7d6:	f6 95       	lsr	r31
 7d8:	87 95       	ror	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	b7 95       	ror	r27
 7e0:	f1 11       	cpse	r31, r1
 7e2:	f8 cf       	rjmp	.-16     	; 0x7d4 <__floatsisf+0x1c>
 7e4:	fa f4       	brpl	.+62     	; 0x824 <__floatsisf+0x6c>
 7e6:	bb 0f       	add	r27, r27
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__floatsisf+0x36>
 7ea:	60 ff       	sbrs	r22, 0
 7ec:	1b c0       	rjmp	.+54     	; 0x824 <__floatsisf+0x6c>
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	16 c0       	rjmp	.+44     	; 0x824 <__floatsisf+0x6c>
 7f8:	88 23       	and	r24, r24
 7fa:	11 f0       	breq	.+4      	; 0x800 <__floatsisf+0x48>
 7fc:	96 e9       	ldi	r25, 0x96	; 150
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <__floatsisf+0x6a>
 800:	77 23       	and	r23, r23
 802:	21 f0       	breq	.+8      	; 0x80c <__floatsisf+0x54>
 804:	9e e8       	ldi	r25, 0x8E	; 142
 806:	87 2f       	mov	r24, r23
 808:	76 2f       	mov	r23, r22
 80a:	05 c0       	rjmp	.+10     	; 0x816 <__floatsisf+0x5e>
 80c:	66 23       	and	r22, r22
 80e:	71 f0       	breq	.+28     	; 0x82c <__floatsisf+0x74>
 810:	96 e8       	ldi	r25, 0x86	; 134
 812:	86 2f       	mov	r24, r22
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	2a f0       	brmi	.+10     	; 0x824 <__floatsisf+0x6c>
 81a:	9a 95       	dec	r25
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	da f7       	brpl	.-10     	; 0x81a <__floatsisf+0x62>
 824:	88 0f       	add	r24, r24
 826:	96 95       	lsr	r25
 828:	87 95       	ror	r24
 82a:	97 f9       	bld	r25, 7
 82c:	08 95       	ret

0000082e <__fp_inf>:
 82e:	97 f9       	bld	r25, 7
 830:	9f 67       	ori	r25, 0x7F	; 127
 832:	80 e8       	ldi	r24, 0x80	; 128
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	08 95       	ret

0000083a <__fp_nan>:
 83a:	9f ef       	ldi	r25, 0xFF	; 255
 83c:	80 ec       	ldi	r24, 0xC0	; 192
 83e:	08 95       	ret

00000840 <__fp_pscA>:
 840:	00 24       	eor	r0, r0
 842:	0a 94       	dec	r0
 844:	16 16       	cp	r1, r22
 846:	17 06       	cpc	r1, r23
 848:	18 06       	cpc	r1, r24
 84a:	09 06       	cpc	r0, r25
 84c:	08 95       	ret

0000084e <__fp_pscB>:
 84e:	00 24       	eor	r0, r0
 850:	0a 94       	dec	r0
 852:	12 16       	cp	r1, r18
 854:	13 06       	cpc	r1, r19
 856:	14 06       	cpc	r1, r20
 858:	05 06       	cpc	r0, r21
 85a:	08 95       	ret

0000085c <__fp_round>:
 85c:	09 2e       	mov	r0, r25
 85e:	03 94       	inc	r0
 860:	00 0c       	add	r0, r0
 862:	11 f4       	brne	.+4      	; 0x868 <__fp_round+0xc>
 864:	88 23       	and	r24, r24
 866:	52 f0       	brmi	.+20     	; 0x87c <__fp_round+0x20>
 868:	bb 0f       	add	r27, r27
 86a:	40 f4       	brcc	.+16     	; 0x87c <__fp_round+0x20>
 86c:	bf 2b       	or	r27, r31
 86e:	11 f4       	brne	.+4      	; 0x874 <__fp_round+0x18>
 870:	60 ff       	sbrs	r22, 0
 872:	04 c0       	rjmp	.+8      	; 0x87c <__fp_round+0x20>
 874:	6f 5f       	subi	r22, 0xFF	; 255
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	8f 4f       	sbci	r24, 0xFF	; 255
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	08 95       	ret

0000087e <__fp_split3>:
 87e:	57 fd       	sbrc	r21, 7
 880:	90 58       	subi	r25, 0x80	; 128
 882:	44 0f       	add	r20, r20
 884:	55 1f       	adc	r21, r21
 886:	59 f0       	breq	.+22     	; 0x89e <__fp_splitA+0x10>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	71 f0       	breq	.+28     	; 0x8a8 <__fp_splitA+0x1a>
 88c:	47 95       	ror	r20

0000088e <__fp_splitA>:
 88e:	88 0f       	add	r24, r24
 890:	97 fb       	bst	r25, 7
 892:	99 1f       	adc	r25, r25
 894:	61 f0       	breq	.+24     	; 0x8ae <__fp_splitA+0x20>
 896:	9f 3f       	cpi	r25, 0xFF	; 255
 898:	79 f0       	breq	.+30     	; 0x8b8 <__fp_splitA+0x2a>
 89a:	87 95       	ror	r24
 89c:	08 95       	ret
 89e:	12 16       	cp	r1, r18
 8a0:	13 06       	cpc	r1, r19
 8a2:	14 06       	cpc	r1, r20
 8a4:	55 1f       	adc	r21, r21
 8a6:	f2 cf       	rjmp	.-28     	; 0x88c <__fp_split3+0xe>
 8a8:	46 95       	lsr	r20
 8aa:	f1 df       	rcall	.-30     	; 0x88e <__fp_splitA>
 8ac:	08 c0       	rjmp	.+16     	; 0x8be <__fp_splitA+0x30>
 8ae:	16 16       	cp	r1, r22
 8b0:	17 06       	cpc	r1, r23
 8b2:	18 06       	cpc	r1, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	f1 cf       	rjmp	.-30     	; 0x89a <__fp_splitA+0xc>
 8b8:	86 95       	lsr	r24
 8ba:	71 05       	cpc	r23, r1
 8bc:	61 05       	cpc	r22, r1
 8be:	08 94       	sec
 8c0:	08 95       	ret

000008c2 <__fp_zero>:
 8c2:	e8 94       	clt

000008c4 <__fp_szero>:
 8c4:	bb 27       	eor	r27, r27
 8c6:	66 27       	eor	r22, r22
 8c8:	77 27       	eor	r23, r23
 8ca:	cb 01       	movw	r24, r22
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__mulsf3>:
 8d0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3x>
 8d4:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_round>
 8d8:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscA>
 8dc:	38 f0       	brcs	.+14     	; 0x8ec <__mulsf3+0x1c>
 8de:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_pscB>
 8e2:	20 f0       	brcs	.+8      	; 0x8ec <__mulsf3+0x1c>
 8e4:	95 23       	and	r25, r21
 8e6:	11 f0       	breq	.+4      	; 0x8ec <__mulsf3+0x1c>
 8e8:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 8ec:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>
 8f0:	11 24       	eor	r1, r1
 8f2:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>

000008f6 <__mulsf3x>:
 8f6:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_split3>
 8fa:	70 f3       	brcs	.-36     	; 0x8d8 <__mulsf3+0x8>

000008fc <__mulsf3_pse>:
 8fc:	95 9f       	mul	r25, r21
 8fe:	c1 f3       	breq	.-16     	; 0x8f0 <__mulsf3+0x20>
 900:	95 0f       	add	r25, r21
 902:	50 e0       	ldi	r21, 0x00	; 0
 904:	55 1f       	adc	r21, r21
 906:	62 9f       	mul	r22, r18
 908:	f0 01       	movw	r30, r0
 90a:	72 9f       	mul	r23, r18
 90c:	bb 27       	eor	r27, r27
 90e:	f0 0d       	add	r31, r0
 910:	b1 1d       	adc	r27, r1
 912:	63 9f       	mul	r22, r19
 914:	aa 27       	eor	r26, r26
 916:	f0 0d       	add	r31, r0
 918:	b1 1d       	adc	r27, r1
 91a:	aa 1f       	adc	r26, r26
 91c:	64 9f       	mul	r22, r20
 91e:	66 27       	eor	r22, r22
 920:	b0 0d       	add	r27, r0
 922:	a1 1d       	adc	r26, r1
 924:	66 1f       	adc	r22, r22
 926:	82 9f       	mul	r24, r18
 928:	22 27       	eor	r18, r18
 92a:	b0 0d       	add	r27, r0
 92c:	a1 1d       	adc	r26, r1
 92e:	62 1f       	adc	r22, r18
 930:	73 9f       	mul	r23, r19
 932:	b0 0d       	add	r27, r0
 934:	a1 1d       	adc	r26, r1
 936:	62 1f       	adc	r22, r18
 938:	83 9f       	mul	r24, r19
 93a:	a0 0d       	add	r26, r0
 93c:	61 1d       	adc	r22, r1
 93e:	22 1f       	adc	r18, r18
 940:	74 9f       	mul	r23, r20
 942:	33 27       	eor	r19, r19
 944:	a0 0d       	add	r26, r0
 946:	61 1d       	adc	r22, r1
 948:	23 1f       	adc	r18, r19
 94a:	84 9f       	mul	r24, r20
 94c:	60 0d       	add	r22, r0
 94e:	21 1d       	adc	r18, r1
 950:	82 2f       	mov	r24, r18
 952:	76 2f       	mov	r23, r22
 954:	6a 2f       	mov	r22, r26
 956:	11 24       	eor	r1, r1
 958:	9f 57       	subi	r25, 0x7F	; 127
 95a:	50 40       	sbci	r21, 0x00	; 0
 95c:	9a f0       	brmi	.+38     	; 0x984 <__stack+0x85>
 95e:	f1 f0       	breq	.+60     	; 0x99c <__stack+0x9d>
 960:	88 23       	and	r24, r24
 962:	4a f0       	brmi	.+18     	; 0x976 <__stack+0x77>
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	bb 1f       	adc	r27, r27
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	91 50       	subi	r25, 0x01	; 1
 972:	50 40       	sbci	r21, 0x00	; 0
 974:	a9 f7       	brne	.-22     	; 0x960 <__stack+0x61>
 976:	9e 3f       	cpi	r25, 0xFE	; 254
 978:	51 05       	cpc	r21, r1
 97a:	80 f0       	brcs	.+32     	; 0x99c <__stack+0x9d>
 97c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 980:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>
 984:	5f 3f       	cpi	r21, 0xFF	; 255
 986:	e4 f3       	brlt	.-8      	; 0x980 <__stack+0x81>
 988:	98 3e       	cpi	r25, 0xE8	; 232
 98a:	d4 f3       	brlt	.-12     	; 0x980 <__stack+0x81>
 98c:	86 95       	lsr	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b7 95       	ror	r27
 994:	f7 95       	ror	r31
 996:	e7 95       	ror	r30
 998:	9f 5f       	subi	r25, 0xFF	; 255
 99a:	c1 f7       	brne	.-16     	; 0x98c <__stack+0x8d>
 99c:	fe 2b       	or	r31, r30
 99e:	88 0f       	add	r24, r24
 9a0:	91 1d       	adc	r25, r1
 9a2:	96 95       	lsr	r25
 9a4:	87 95       	ror	r24
 9a6:	97 f9       	bld	r25, 7
 9a8:	08 95       	ret

000009aa <printf>:
 9aa:	a0 e0       	ldi	r26, 0x00	; 0
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	eb ed       	ldi	r30, 0xDB	; 219
 9b0:	f4 e0       	ldi	r31, 0x04	; 4
 9b2:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__prologue_saves__+0x20>
 9b6:	ae 01       	movw	r20, r28
 9b8:	4b 5f       	subi	r20, 0xFB	; 251
 9ba:	5f 4f       	sbci	r21, 0xFF	; 255
 9bc:	fa 01       	movw	r30, r20
 9be:	61 91       	ld	r22, Z+
 9c0:	71 91       	ld	r23, Z+
 9c2:	af 01       	movw	r20, r30
 9c4:	80 91 81 01 	lds	r24, 0x0181
 9c8:	90 91 82 01 	lds	r25, 0x0182
 9cc:	0e 94 1b 05 	call	0xa36	; 0xa36 <vfprintf>
 9d0:	e2 e0       	ldi	r30, 0x02	; 2
 9d2:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__epilogue_restores__+0x20>

000009d6 <puts>:
 9d6:	0f 93       	push	r16
 9d8:	1f 93       	push	r17
 9da:	cf 93       	push	r28
 9dc:	df 93       	push	r29
 9de:	e0 91 81 01 	lds	r30, 0x0181
 9e2:	f0 91 82 01 	lds	r31, 0x0182
 9e6:	23 81       	ldd	r18, Z+3	; 0x03
 9e8:	21 ff       	sbrs	r18, 1
 9ea:	1b c0       	rjmp	.+54     	; 0xa22 <puts+0x4c>
 9ec:	8c 01       	movw	r16, r24
 9ee:	d0 e0       	ldi	r29, 0x00	; 0
 9f0:	c0 e0       	ldi	r28, 0x00	; 0
 9f2:	f8 01       	movw	r30, r16
 9f4:	81 91       	ld	r24, Z+
 9f6:	8f 01       	movw	r16, r30
 9f8:	60 91 81 01 	lds	r22, 0x0181
 9fc:	70 91 82 01 	lds	r23, 0x0182
 a00:	db 01       	movw	r26, r22
 a02:	18 96       	adiw	r26, 0x08	; 8
 a04:	ed 91       	ld	r30, X+
 a06:	fc 91       	ld	r31, X
 a08:	19 97       	sbiw	r26, 0x09	; 9
 a0a:	88 23       	and	r24, r24
 a0c:	31 f0       	breq	.+12     	; 0xa1a <puts+0x44>
 a0e:	09 95       	icall
 a10:	89 2b       	or	r24, r25
 a12:	79 f3       	breq	.-34     	; 0x9f2 <puts+0x1c>
 a14:	df ef       	ldi	r29, 0xFF	; 255
 a16:	cf ef       	ldi	r28, 0xFF	; 255
 a18:	ec cf       	rjmp	.-40     	; 0x9f2 <puts+0x1c>
 a1a:	8a e0       	ldi	r24, 0x0A	; 10
 a1c:	09 95       	icall
 a1e:	89 2b       	or	r24, r25
 a20:	19 f0       	breq	.+6      	; 0xa28 <puts+0x52>
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	9f ef       	ldi	r25, 0xFF	; 255
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <puts+0x56>
 a28:	8d 2f       	mov	r24, r29
 a2a:	9c 2f       	mov	r25, r28
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	0f 91       	pop	r16
 a34:	08 95       	ret

00000a36 <vfprintf>:
 a36:	ac e0       	ldi	r26, 0x0C	; 12
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e1 e2       	ldi	r30, 0x21	; 33
 a3c:	f5 e0       	ldi	r31, 0x05	; 5
 a3e:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__prologue_saves__>
 a42:	7c 01       	movw	r14, r24
 a44:	6b 01       	movw	r12, r22
 a46:	8a 01       	movw	r16, r20
 a48:	fc 01       	movw	r30, r24
 a4a:	17 82       	std	Z+7, r1	; 0x07
 a4c:	16 82       	std	Z+6, r1	; 0x06
 a4e:	83 81       	ldd	r24, Z+3	; 0x03
 a50:	81 ff       	sbrs	r24, 1
 a52:	bd c1       	rjmp	.+890    	; 0xdce <vfprintf+0x398>
 a54:	ce 01       	movw	r24, r28
 a56:	01 96       	adiw	r24, 0x01	; 1
 a58:	4c 01       	movw	r8, r24
 a5a:	f7 01       	movw	r30, r14
 a5c:	93 81       	ldd	r25, Z+3	; 0x03
 a5e:	f6 01       	movw	r30, r12
 a60:	93 fd       	sbrc	r25, 3
 a62:	85 91       	lpm	r24, Z+
 a64:	93 ff       	sbrs	r25, 3
 a66:	81 91       	ld	r24, Z+
 a68:	6f 01       	movw	r12, r30
 a6a:	88 23       	and	r24, r24
 a6c:	09 f4       	brne	.+2      	; 0xa70 <vfprintf+0x3a>
 a6e:	ab c1       	rjmp	.+854    	; 0xdc6 <vfprintf+0x390>
 a70:	85 32       	cpi	r24, 0x25	; 37
 a72:	39 f4       	brne	.+14     	; 0xa82 <vfprintf+0x4c>
 a74:	93 fd       	sbrc	r25, 3
 a76:	85 91       	lpm	r24, Z+
 a78:	93 ff       	sbrs	r25, 3
 a7a:	81 91       	ld	r24, Z+
 a7c:	6f 01       	movw	r12, r30
 a7e:	85 32       	cpi	r24, 0x25	; 37
 a80:	29 f4       	brne	.+10     	; 0xa8c <vfprintf+0x56>
 a82:	b7 01       	movw	r22, r14
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 a8a:	e7 cf       	rjmp	.-50     	; 0xa5a <vfprintf+0x24>
 a8c:	51 2c       	mov	r5, r1
 a8e:	31 2c       	mov	r3, r1
 a90:	20 e0       	ldi	r18, 0x00	; 0
 a92:	20 32       	cpi	r18, 0x20	; 32
 a94:	a0 f4       	brcc	.+40     	; 0xabe <vfprintf+0x88>
 a96:	8b 32       	cpi	r24, 0x2B	; 43
 a98:	69 f0       	breq	.+26     	; 0xab4 <vfprintf+0x7e>
 a9a:	30 f4       	brcc	.+12     	; 0xaa8 <vfprintf+0x72>
 a9c:	80 32       	cpi	r24, 0x20	; 32
 a9e:	59 f0       	breq	.+22     	; 0xab6 <vfprintf+0x80>
 aa0:	83 32       	cpi	r24, 0x23	; 35
 aa2:	69 f4       	brne	.+26     	; 0xabe <vfprintf+0x88>
 aa4:	20 61       	ori	r18, 0x10	; 16
 aa6:	2c c0       	rjmp	.+88     	; 0xb00 <vfprintf+0xca>
 aa8:	8d 32       	cpi	r24, 0x2D	; 45
 aaa:	39 f0       	breq	.+14     	; 0xaba <vfprintf+0x84>
 aac:	80 33       	cpi	r24, 0x30	; 48
 aae:	39 f4       	brne	.+14     	; 0xabe <vfprintf+0x88>
 ab0:	21 60       	ori	r18, 0x01	; 1
 ab2:	26 c0       	rjmp	.+76     	; 0xb00 <vfprintf+0xca>
 ab4:	22 60       	ori	r18, 0x02	; 2
 ab6:	24 60       	ori	r18, 0x04	; 4
 ab8:	23 c0       	rjmp	.+70     	; 0xb00 <vfprintf+0xca>
 aba:	28 60       	ori	r18, 0x08	; 8
 abc:	21 c0       	rjmp	.+66     	; 0xb00 <vfprintf+0xca>
 abe:	27 fd       	sbrc	r18, 7
 ac0:	27 c0       	rjmp	.+78     	; 0xb10 <vfprintf+0xda>
 ac2:	30 ed       	ldi	r19, 0xD0	; 208
 ac4:	38 0f       	add	r19, r24
 ac6:	3a 30       	cpi	r19, 0x0A	; 10
 ac8:	78 f4       	brcc	.+30     	; 0xae8 <vfprintf+0xb2>
 aca:	26 ff       	sbrs	r18, 6
 acc:	06 c0       	rjmp	.+12     	; 0xada <vfprintf+0xa4>
 ace:	fa e0       	ldi	r31, 0x0A	; 10
 ad0:	5f 9e       	mul	r5, r31
 ad2:	30 0d       	add	r19, r0
 ad4:	11 24       	eor	r1, r1
 ad6:	53 2e       	mov	r5, r19
 ad8:	13 c0       	rjmp	.+38     	; 0xb00 <vfprintf+0xca>
 ada:	8a e0       	ldi	r24, 0x0A	; 10
 adc:	38 9e       	mul	r3, r24
 ade:	30 0d       	add	r19, r0
 ae0:	11 24       	eor	r1, r1
 ae2:	33 2e       	mov	r3, r19
 ae4:	20 62       	ori	r18, 0x20	; 32
 ae6:	0c c0       	rjmp	.+24     	; 0xb00 <vfprintf+0xca>
 ae8:	8e 32       	cpi	r24, 0x2E	; 46
 aea:	21 f4       	brne	.+8      	; 0xaf4 <vfprintf+0xbe>
 aec:	26 fd       	sbrc	r18, 6
 aee:	6b c1       	rjmp	.+726    	; 0xdc6 <vfprintf+0x390>
 af0:	20 64       	ori	r18, 0x40	; 64
 af2:	06 c0       	rjmp	.+12     	; 0xb00 <vfprintf+0xca>
 af4:	8c 36       	cpi	r24, 0x6C	; 108
 af6:	11 f4       	brne	.+4      	; 0xafc <vfprintf+0xc6>
 af8:	20 68       	ori	r18, 0x80	; 128
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0xca>
 afc:	88 36       	cpi	r24, 0x68	; 104
 afe:	41 f4       	brne	.+16     	; 0xb10 <vfprintf+0xda>
 b00:	f6 01       	movw	r30, r12
 b02:	93 fd       	sbrc	r25, 3
 b04:	85 91       	lpm	r24, Z+
 b06:	93 ff       	sbrs	r25, 3
 b08:	81 91       	ld	r24, Z+
 b0a:	6f 01       	movw	r12, r30
 b0c:	81 11       	cpse	r24, r1
 b0e:	c1 cf       	rjmp	.-126    	; 0xa92 <vfprintf+0x5c>
 b10:	98 2f       	mov	r25, r24
 b12:	9f 7d       	andi	r25, 0xDF	; 223
 b14:	95 54       	subi	r25, 0x45	; 69
 b16:	93 30       	cpi	r25, 0x03	; 3
 b18:	28 f4       	brcc	.+10     	; 0xb24 <vfprintf+0xee>
 b1a:	0c 5f       	subi	r16, 0xFC	; 252
 b1c:	1f 4f       	sbci	r17, 0xFF	; 255
 b1e:	ff e3       	ldi	r31, 0x3F	; 63
 b20:	f9 83       	std	Y+1, r31	; 0x01
 b22:	0d c0       	rjmp	.+26     	; 0xb3e <vfprintf+0x108>
 b24:	83 36       	cpi	r24, 0x63	; 99
 b26:	31 f0       	breq	.+12     	; 0xb34 <vfprintf+0xfe>
 b28:	83 37       	cpi	r24, 0x73	; 115
 b2a:	71 f0       	breq	.+28     	; 0xb48 <vfprintf+0x112>
 b2c:	83 35       	cpi	r24, 0x53	; 83
 b2e:	09 f0       	breq	.+2      	; 0xb32 <vfprintf+0xfc>
 b30:	5b c0       	rjmp	.+182    	; 0xbe8 <vfprintf+0x1b2>
 b32:	22 c0       	rjmp	.+68     	; 0xb78 <vfprintf+0x142>
 b34:	f8 01       	movw	r30, r16
 b36:	80 81       	ld	r24, Z
 b38:	89 83       	std	Y+1, r24	; 0x01
 b3a:	0e 5f       	subi	r16, 0xFE	; 254
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	44 24       	eor	r4, r4
 b40:	43 94       	inc	r4
 b42:	51 2c       	mov	r5, r1
 b44:	54 01       	movw	r10, r8
 b46:	15 c0       	rjmp	.+42     	; 0xb72 <vfprintf+0x13c>
 b48:	38 01       	movw	r6, r16
 b4a:	f2 e0       	ldi	r31, 0x02	; 2
 b4c:	6f 0e       	add	r6, r31
 b4e:	71 1c       	adc	r7, r1
 b50:	f8 01       	movw	r30, r16
 b52:	a0 80       	ld	r10, Z
 b54:	b1 80       	ldd	r11, Z+1	; 0x01
 b56:	26 ff       	sbrs	r18, 6
 b58:	03 c0       	rjmp	.+6      	; 0xb60 <vfprintf+0x12a>
 b5a:	65 2d       	mov	r22, r5
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x12e>
 b60:	6f ef       	ldi	r22, 0xFF	; 255
 b62:	7f ef       	ldi	r23, 0xFF	; 255
 b64:	c5 01       	movw	r24, r10
 b66:	2c 87       	std	Y+12, r18	; 0x0c
 b68:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <strnlen>
 b6c:	2c 01       	movw	r4, r24
 b6e:	83 01       	movw	r16, r6
 b70:	2c 85       	ldd	r18, Y+12	; 0x0c
 b72:	2f 77       	andi	r18, 0x7F	; 127
 b74:	22 2e       	mov	r2, r18
 b76:	17 c0       	rjmp	.+46     	; 0xba6 <vfprintf+0x170>
 b78:	38 01       	movw	r6, r16
 b7a:	f2 e0       	ldi	r31, 0x02	; 2
 b7c:	6f 0e       	add	r6, r31
 b7e:	71 1c       	adc	r7, r1
 b80:	f8 01       	movw	r30, r16
 b82:	a0 80       	ld	r10, Z
 b84:	b1 80       	ldd	r11, Z+1	; 0x01
 b86:	26 ff       	sbrs	r18, 6
 b88:	03 c0       	rjmp	.+6      	; 0xb90 <vfprintf+0x15a>
 b8a:	65 2d       	mov	r22, r5
 b8c:	70 e0       	ldi	r23, 0x00	; 0
 b8e:	02 c0       	rjmp	.+4      	; 0xb94 <vfprintf+0x15e>
 b90:	6f ef       	ldi	r22, 0xFF	; 255
 b92:	7f ef       	ldi	r23, 0xFF	; 255
 b94:	c5 01       	movw	r24, r10
 b96:	2c 87       	std	Y+12, r18	; 0x0c
 b98:	0e 94 ed 06 	call	0xdda	; 0xdda <strnlen_P>
 b9c:	2c 01       	movw	r4, r24
 b9e:	2c 85       	ldd	r18, Y+12	; 0x0c
 ba0:	20 68       	ori	r18, 0x80	; 128
 ba2:	22 2e       	mov	r2, r18
 ba4:	83 01       	movw	r16, r6
 ba6:	23 fc       	sbrc	r2, 3
 ba8:	1b c0       	rjmp	.+54     	; 0xbe0 <vfprintf+0x1aa>
 baa:	83 2d       	mov	r24, r3
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	48 16       	cp	r4, r24
 bb0:	59 06       	cpc	r5, r25
 bb2:	b0 f4       	brcc	.+44     	; 0xbe0 <vfprintf+0x1aa>
 bb4:	b7 01       	movw	r22, r14
 bb6:	80 e2       	ldi	r24, 0x20	; 32
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 bbe:	3a 94       	dec	r3
 bc0:	f4 cf       	rjmp	.-24     	; 0xbaa <vfprintf+0x174>
 bc2:	f5 01       	movw	r30, r10
 bc4:	27 fc       	sbrc	r2, 7
 bc6:	85 91       	lpm	r24, Z+
 bc8:	27 fe       	sbrs	r2, 7
 bca:	81 91       	ld	r24, Z+
 bcc:	5f 01       	movw	r10, r30
 bce:	b7 01       	movw	r22, r14
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 bd6:	31 10       	cpse	r3, r1
 bd8:	3a 94       	dec	r3
 bda:	f1 e0       	ldi	r31, 0x01	; 1
 bdc:	4f 1a       	sub	r4, r31
 bde:	51 08       	sbc	r5, r1
 be0:	41 14       	cp	r4, r1
 be2:	51 04       	cpc	r5, r1
 be4:	71 f7       	brne	.-36     	; 0xbc2 <vfprintf+0x18c>
 be6:	e5 c0       	rjmp	.+458    	; 0xdb2 <vfprintf+0x37c>
 be8:	84 36       	cpi	r24, 0x64	; 100
 bea:	11 f0       	breq	.+4      	; 0xbf0 <vfprintf+0x1ba>
 bec:	89 36       	cpi	r24, 0x69	; 105
 bee:	39 f5       	brne	.+78     	; 0xc3e <vfprintf+0x208>
 bf0:	f8 01       	movw	r30, r16
 bf2:	27 ff       	sbrs	r18, 7
 bf4:	07 c0       	rjmp	.+14     	; 0xc04 <vfprintf+0x1ce>
 bf6:	60 81       	ld	r22, Z
 bf8:	71 81       	ldd	r23, Z+1	; 0x01
 bfa:	82 81       	ldd	r24, Z+2	; 0x02
 bfc:	93 81       	ldd	r25, Z+3	; 0x03
 bfe:	0c 5f       	subi	r16, 0xFC	; 252
 c00:	1f 4f       	sbci	r17, 0xFF	; 255
 c02:	08 c0       	rjmp	.+16     	; 0xc14 <vfprintf+0x1de>
 c04:	60 81       	ld	r22, Z
 c06:	71 81       	ldd	r23, Z+1	; 0x01
 c08:	07 2e       	mov	r0, r23
 c0a:	00 0c       	add	r0, r0
 c0c:	88 0b       	sbc	r24, r24
 c0e:	99 0b       	sbc	r25, r25
 c10:	0e 5f       	subi	r16, 0xFE	; 254
 c12:	1f 4f       	sbci	r17, 0xFF	; 255
 c14:	2f 76       	andi	r18, 0x6F	; 111
 c16:	72 2e       	mov	r7, r18
 c18:	97 ff       	sbrs	r25, 7
 c1a:	09 c0       	rjmp	.+18     	; 0xc2e <vfprintf+0x1f8>
 c1c:	90 95       	com	r25
 c1e:	80 95       	com	r24
 c20:	70 95       	com	r23
 c22:	61 95       	neg	r22
 c24:	7f 4f       	sbci	r23, 0xFF	; 255
 c26:	8f 4f       	sbci	r24, 0xFF	; 255
 c28:	9f 4f       	sbci	r25, 0xFF	; 255
 c2a:	20 68       	ori	r18, 0x80	; 128
 c2c:	72 2e       	mov	r7, r18
 c2e:	2a e0       	ldi	r18, 0x0A	; 10
 c30:	30 e0       	ldi	r19, 0x00	; 0
 c32:	a4 01       	movw	r20, r8
 c34:	0e 94 3b 07 	call	0xe76	; 0xe76 <__ultoa_invert>
 c38:	a8 2e       	mov	r10, r24
 c3a:	a8 18       	sub	r10, r8
 c3c:	44 c0       	rjmp	.+136    	; 0xcc6 <vfprintf+0x290>
 c3e:	85 37       	cpi	r24, 0x75	; 117
 c40:	29 f4       	brne	.+10     	; 0xc4c <vfprintf+0x216>
 c42:	2f 7e       	andi	r18, 0xEF	; 239
 c44:	b2 2e       	mov	r11, r18
 c46:	2a e0       	ldi	r18, 0x0A	; 10
 c48:	30 e0       	ldi	r19, 0x00	; 0
 c4a:	25 c0       	rjmp	.+74     	; 0xc96 <vfprintf+0x260>
 c4c:	f2 2f       	mov	r31, r18
 c4e:	f9 7f       	andi	r31, 0xF9	; 249
 c50:	bf 2e       	mov	r11, r31
 c52:	8f 36       	cpi	r24, 0x6F	; 111
 c54:	c1 f0       	breq	.+48     	; 0xc86 <vfprintf+0x250>
 c56:	18 f4       	brcc	.+6      	; 0xc5e <vfprintf+0x228>
 c58:	88 35       	cpi	r24, 0x58	; 88
 c5a:	79 f0       	breq	.+30     	; 0xc7a <vfprintf+0x244>
 c5c:	b4 c0       	rjmp	.+360    	; 0xdc6 <vfprintf+0x390>
 c5e:	80 37       	cpi	r24, 0x70	; 112
 c60:	19 f0       	breq	.+6      	; 0xc68 <vfprintf+0x232>
 c62:	88 37       	cpi	r24, 0x78	; 120
 c64:	21 f0       	breq	.+8      	; 0xc6e <vfprintf+0x238>
 c66:	af c0       	rjmp	.+350    	; 0xdc6 <vfprintf+0x390>
 c68:	2f 2f       	mov	r18, r31
 c6a:	20 61       	ori	r18, 0x10	; 16
 c6c:	b2 2e       	mov	r11, r18
 c6e:	b4 fe       	sbrs	r11, 4
 c70:	0d c0       	rjmp	.+26     	; 0xc8c <vfprintf+0x256>
 c72:	8b 2d       	mov	r24, r11
 c74:	84 60       	ori	r24, 0x04	; 4
 c76:	b8 2e       	mov	r11, r24
 c78:	09 c0       	rjmp	.+18     	; 0xc8c <vfprintf+0x256>
 c7a:	24 ff       	sbrs	r18, 4
 c7c:	0a c0       	rjmp	.+20     	; 0xc92 <vfprintf+0x25c>
 c7e:	9f 2f       	mov	r25, r31
 c80:	96 60       	ori	r25, 0x06	; 6
 c82:	b9 2e       	mov	r11, r25
 c84:	06 c0       	rjmp	.+12     	; 0xc92 <vfprintf+0x25c>
 c86:	28 e0       	ldi	r18, 0x08	; 8
 c88:	30 e0       	ldi	r19, 0x00	; 0
 c8a:	05 c0       	rjmp	.+10     	; 0xc96 <vfprintf+0x260>
 c8c:	20 e1       	ldi	r18, 0x10	; 16
 c8e:	30 e0       	ldi	r19, 0x00	; 0
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <vfprintf+0x260>
 c92:	20 e1       	ldi	r18, 0x10	; 16
 c94:	32 e0       	ldi	r19, 0x02	; 2
 c96:	f8 01       	movw	r30, r16
 c98:	b7 fe       	sbrs	r11, 7
 c9a:	07 c0       	rjmp	.+14     	; 0xcaa <vfprintf+0x274>
 c9c:	60 81       	ld	r22, Z
 c9e:	71 81       	ldd	r23, Z+1	; 0x01
 ca0:	82 81       	ldd	r24, Z+2	; 0x02
 ca2:	93 81       	ldd	r25, Z+3	; 0x03
 ca4:	0c 5f       	subi	r16, 0xFC	; 252
 ca6:	1f 4f       	sbci	r17, 0xFF	; 255
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <vfprintf+0x280>
 caa:	60 81       	ld	r22, Z
 cac:	71 81       	ldd	r23, Z+1	; 0x01
 cae:	80 e0       	ldi	r24, 0x00	; 0
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	0e 5f       	subi	r16, 0xFE	; 254
 cb4:	1f 4f       	sbci	r17, 0xFF	; 255
 cb6:	a4 01       	movw	r20, r8
 cb8:	0e 94 3b 07 	call	0xe76	; 0xe76 <__ultoa_invert>
 cbc:	a8 2e       	mov	r10, r24
 cbe:	a8 18       	sub	r10, r8
 cc0:	fb 2d       	mov	r31, r11
 cc2:	ff 77       	andi	r31, 0x7F	; 127
 cc4:	7f 2e       	mov	r7, r31
 cc6:	76 fe       	sbrs	r7, 6
 cc8:	0b c0       	rjmp	.+22     	; 0xce0 <vfprintf+0x2aa>
 cca:	37 2d       	mov	r19, r7
 ccc:	3e 7f       	andi	r19, 0xFE	; 254
 cce:	a5 14       	cp	r10, r5
 cd0:	50 f4       	brcc	.+20     	; 0xce6 <vfprintf+0x2b0>
 cd2:	74 fe       	sbrs	r7, 4
 cd4:	0a c0       	rjmp	.+20     	; 0xcea <vfprintf+0x2b4>
 cd6:	72 fc       	sbrc	r7, 2
 cd8:	08 c0       	rjmp	.+16     	; 0xcea <vfprintf+0x2b4>
 cda:	37 2d       	mov	r19, r7
 cdc:	3e 7e       	andi	r19, 0xEE	; 238
 cde:	05 c0       	rjmp	.+10     	; 0xcea <vfprintf+0x2b4>
 ce0:	ba 2c       	mov	r11, r10
 ce2:	37 2d       	mov	r19, r7
 ce4:	03 c0       	rjmp	.+6      	; 0xcec <vfprintf+0x2b6>
 ce6:	ba 2c       	mov	r11, r10
 ce8:	01 c0       	rjmp	.+2      	; 0xcec <vfprintf+0x2b6>
 cea:	b5 2c       	mov	r11, r5
 cec:	34 ff       	sbrs	r19, 4
 cee:	0d c0       	rjmp	.+26     	; 0xd0a <vfprintf+0x2d4>
 cf0:	fe 01       	movw	r30, r28
 cf2:	ea 0d       	add	r30, r10
 cf4:	f1 1d       	adc	r31, r1
 cf6:	80 81       	ld	r24, Z
 cf8:	80 33       	cpi	r24, 0x30	; 48
 cfa:	11 f4       	brne	.+4      	; 0xd00 <vfprintf+0x2ca>
 cfc:	39 7e       	andi	r19, 0xE9	; 233
 cfe:	09 c0       	rjmp	.+18     	; 0xd12 <vfprintf+0x2dc>
 d00:	32 ff       	sbrs	r19, 2
 d02:	06 c0       	rjmp	.+12     	; 0xd10 <vfprintf+0x2da>
 d04:	b3 94       	inc	r11
 d06:	b3 94       	inc	r11
 d08:	04 c0       	rjmp	.+8      	; 0xd12 <vfprintf+0x2dc>
 d0a:	83 2f       	mov	r24, r19
 d0c:	86 78       	andi	r24, 0x86	; 134
 d0e:	09 f0       	breq	.+2      	; 0xd12 <vfprintf+0x2dc>
 d10:	b3 94       	inc	r11
 d12:	33 fd       	sbrc	r19, 3
 d14:	13 c0       	rjmp	.+38     	; 0xd3c <vfprintf+0x306>
 d16:	30 ff       	sbrs	r19, 0
 d18:	06 c0       	rjmp	.+12     	; 0xd26 <vfprintf+0x2f0>
 d1a:	5a 2c       	mov	r5, r10
 d1c:	b3 14       	cp	r11, r3
 d1e:	18 f4       	brcc	.+6      	; 0xd26 <vfprintf+0x2f0>
 d20:	53 0c       	add	r5, r3
 d22:	5b 18       	sub	r5, r11
 d24:	b3 2c       	mov	r11, r3
 d26:	b3 14       	cp	r11, r3
 d28:	68 f4       	brcc	.+26     	; 0xd44 <vfprintf+0x30e>
 d2a:	b7 01       	movw	r22, r14
 d2c:	80 e2       	ldi	r24, 0x20	; 32
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	3c 87       	std	Y+12, r19	; 0x0c
 d32:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 d36:	b3 94       	inc	r11
 d38:	3c 85       	ldd	r19, Y+12	; 0x0c
 d3a:	f5 cf       	rjmp	.-22     	; 0xd26 <vfprintf+0x2f0>
 d3c:	b3 14       	cp	r11, r3
 d3e:	10 f4       	brcc	.+4      	; 0xd44 <vfprintf+0x30e>
 d40:	3b 18       	sub	r3, r11
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <vfprintf+0x310>
 d44:	31 2c       	mov	r3, r1
 d46:	34 ff       	sbrs	r19, 4
 d48:	12 c0       	rjmp	.+36     	; 0xd6e <vfprintf+0x338>
 d4a:	b7 01       	movw	r22, r14
 d4c:	80 e3       	ldi	r24, 0x30	; 48
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	3c 87       	std	Y+12, r19	; 0x0c
 d52:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 d56:	3c 85       	ldd	r19, Y+12	; 0x0c
 d58:	32 ff       	sbrs	r19, 2
 d5a:	17 c0       	rjmp	.+46     	; 0xd8a <vfprintf+0x354>
 d5c:	31 fd       	sbrc	r19, 1
 d5e:	03 c0       	rjmp	.+6      	; 0xd66 <vfprintf+0x330>
 d60:	88 e7       	ldi	r24, 0x78	; 120
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	02 c0       	rjmp	.+4      	; 0xd6a <vfprintf+0x334>
 d66:	88 e5       	ldi	r24, 0x58	; 88
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	b7 01       	movw	r22, r14
 d6c:	0c c0       	rjmp	.+24     	; 0xd86 <vfprintf+0x350>
 d6e:	83 2f       	mov	r24, r19
 d70:	86 78       	andi	r24, 0x86	; 134
 d72:	59 f0       	breq	.+22     	; 0xd8a <vfprintf+0x354>
 d74:	31 ff       	sbrs	r19, 1
 d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x346>
 d78:	8b e2       	ldi	r24, 0x2B	; 43
 d7a:	01 c0       	rjmp	.+2      	; 0xd7e <vfprintf+0x348>
 d7c:	80 e2       	ldi	r24, 0x20	; 32
 d7e:	37 fd       	sbrc	r19, 7
 d80:	8d e2       	ldi	r24, 0x2D	; 45
 d82:	b7 01       	movw	r22, r14
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 d8a:	a5 14       	cp	r10, r5
 d8c:	38 f4       	brcc	.+14     	; 0xd9c <vfprintf+0x366>
 d8e:	b7 01       	movw	r22, r14
 d90:	80 e3       	ldi	r24, 0x30	; 48
 d92:	90 e0       	ldi	r25, 0x00	; 0
 d94:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 d98:	5a 94       	dec	r5
 d9a:	f7 cf       	rjmp	.-18     	; 0xd8a <vfprintf+0x354>
 d9c:	aa 94       	dec	r10
 d9e:	f4 01       	movw	r30, r8
 da0:	ea 0d       	add	r30, r10
 da2:	f1 1d       	adc	r31, r1
 da4:	80 81       	ld	r24, Z
 da6:	b7 01       	movw	r22, r14
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 dae:	a1 10       	cpse	r10, r1
 db0:	f5 cf       	rjmp	.-22     	; 0xd9c <vfprintf+0x366>
 db2:	33 20       	and	r3, r3
 db4:	09 f4       	brne	.+2      	; 0xdb8 <vfprintf+0x382>
 db6:	51 ce       	rjmp	.-862    	; 0xa5a <vfprintf+0x24>
 db8:	b7 01       	movw	r22, r14
 dba:	80 e2       	ldi	r24, 0x20	; 32
 dbc:	90 e0       	ldi	r25, 0x00	; 0
 dbe:	0e 94 03 07 	call	0xe06	; 0xe06 <fputc>
 dc2:	3a 94       	dec	r3
 dc4:	f6 cf       	rjmp	.-20     	; 0xdb2 <vfprintf+0x37c>
 dc6:	f7 01       	movw	r30, r14
 dc8:	86 81       	ldd	r24, Z+6	; 0x06
 dca:	97 81       	ldd	r25, Z+7	; 0x07
 dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <vfprintf+0x39c>
 dce:	8f ef       	ldi	r24, 0xFF	; 255
 dd0:	9f ef       	ldi	r25, 0xFF	; 255
 dd2:	2c 96       	adiw	r28, 0x0c	; 12
 dd4:	e2 e1       	ldi	r30, 0x12	; 18
 dd6:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__epilogue_restores__>

00000dda <strnlen_P>:
 dda:	fc 01       	movw	r30, r24
 ddc:	05 90       	lpm	r0, Z+
 dde:	61 50       	subi	r22, 0x01	; 1
 de0:	70 40       	sbci	r23, 0x00	; 0
 de2:	01 10       	cpse	r0, r1
 de4:	d8 f7       	brcc	.-10     	; 0xddc <strnlen_P+0x2>
 de6:	80 95       	com	r24
 de8:	90 95       	com	r25
 dea:	8e 0f       	add	r24, r30
 dec:	9f 1f       	adc	r25, r31
 dee:	08 95       	ret

00000df0 <strnlen>:
 df0:	fc 01       	movw	r30, r24
 df2:	61 50       	subi	r22, 0x01	; 1
 df4:	70 40       	sbci	r23, 0x00	; 0
 df6:	01 90       	ld	r0, Z+
 df8:	01 10       	cpse	r0, r1
 dfa:	d8 f7       	brcc	.-10     	; 0xdf2 <strnlen+0x2>
 dfc:	80 95       	com	r24
 dfe:	90 95       	com	r25
 e00:	8e 0f       	add	r24, r30
 e02:	9f 1f       	adc	r25, r31
 e04:	08 95       	ret

00000e06 <fputc>:
 e06:	0f 93       	push	r16
 e08:	1f 93       	push	r17
 e0a:	cf 93       	push	r28
 e0c:	df 93       	push	r29
 e0e:	fb 01       	movw	r30, r22
 e10:	23 81       	ldd	r18, Z+3	; 0x03
 e12:	21 fd       	sbrc	r18, 1
 e14:	03 c0       	rjmp	.+6      	; 0xe1c <fputc+0x16>
 e16:	8f ef       	ldi	r24, 0xFF	; 255
 e18:	9f ef       	ldi	r25, 0xFF	; 255
 e1a:	28 c0       	rjmp	.+80     	; 0xe6c <fputc+0x66>
 e1c:	22 ff       	sbrs	r18, 2
 e1e:	16 c0       	rjmp	.+44     	; 0xe4c <fputc+0x46>
 e20:	46 81       	ldd	r20, Z+6	; 0x06
 e22:	57 81       	ldd	r21, Z+7	; 0x07
 e24:	24 81       	ldd	r18, Z+4	; 0x04
 e26:	35 81       	ldd	r19, Z+5	; 0x05
 e28:	42 17       	cp	r20, r18
 e2a:	53 07       	cpc	r21, r19
 e2c:	44 f4       	brge	.+16     	; 0xe3e <fputc+0x38>
 e2e:	a0 81       	ld	r26, Z
 e30:	b1 81       	ldd	r27, Z+1	; 0x01
 e32:	9d 01       	movw	r18, r26
 e34:	2f 5f       	subi	r18, 0xFF	; 255
 e36:	3f 4f       	sbci	r19, 0xFF	; 255
 e38:	31 83       	std	Z+1, r19	; 0x01
 e3a:	20 83       	st	Z, r18
 e3c:	8c 93       	st	X, r24
 e3e:	26 81       	ldd	r18, Z+6	; 0x06
 e40:	37 81       	ldd	r19, Z+7	; 0x07
 e42:	2f 5f       	subi	r18, 0xFF	; 255
 e44:	3f 4f       	sbci	r19, 0xFF	; 255
 e46:	37 83       	std	Z+7, r19	; 0x07
 e48:	26 83       	std	Z+6, r18	; 0x06
 e4a:	10 c0       	rjmp	.+32     	; 0xe6c <fputc+0x66>
 e4c:	eb 01       	movw	r28, r22
 e4e:	09 2f       	mov	r16, r25
 e50:	18 2f       	mov	r17, r24
 e52:	00 84       	ldd	r0, Z+8	; 0x08
 e54:	f1 85       	ldd	r31, Z+9	; 0x09
 e56:	e0 2d       	mov	r30, r0
 e58:	09 95       	icall
 e5a:	89 2b       	or	r24, r25
 e5c:	e1 f6       	brne	.-72     	; 0xe16 <fputc+0x10>
 e5e:	8e 81       	ldd	r24, Y+6	; 0x06
 e60:	9f 81       	ldd	r25, Y+7	; 0x07
 e62:	01 96       	adiw	r24, 0x01	; 1
 e64:	9f 83       	std	Y+7, r25	; 0x07
 e66:	8e 83       	std	Y+6, r24	; 0x06
 e68:	81 2f       	mov	r24, r17
 e6a:	90 2f       	mov	r25, r16
 e6c:	df 91       	pop	r29
 e6e:	cf 91       	pop	r28
 e70:	1f 91       	pop	r17
 e72:	0f 91       	pop	r16
 e74:	08 95       	ret

00000e76 <__ultoa_invert>:
 e76:	fa 01       	movw	r30, r20
 e78:	aa 27       	eor	r26, r26
 e7a:	28 30       	cpi	r18, 0x08	; 8
 e7c:	51 f1       	breq	.+84     	; 0xed2 <__ultoa_invert+0x5c>
 e7e:	20 31       	cpi	r18, 0x10	; 16
 e80:	81 f1       	breq	.+96     	; 0xee2 <__ultoa_invert+0x6c>
 e82:	e8 94       	clt
 e84:	6f 93       	push	r22
 e86:	6e 7f       	andi	r22, 0xFE	; 254
 e88:	6e 5f       	subi	r22, 0xFE	; 254
 e8a:	7f 4f       	sbci	r23, 0xFF	; 255
 e8c:	8f 4f       	sbci	r24, 0xFF	; 255
 e8e:	9f 4f       	sbci	r25, 0xFF	; 255
 e90:	af 4f       	sbci	r26, 0xFF	; 255
 e92:	b1 e0       	ldi	r27, 0x01	; 1
 e94:	3e d0       	rcall	.+124    	; 0xf12 <__ultoa_invert+0x9c>
 e96:	b4 e0       	ldi	r27, 0x04	; 4
 e98:	3c d0       	rcall	.+120    	; 0xf12 <__ultoa_invert+0x9c>
 e9a:	67 0f       	add	r22, r23
 e9c:	78 1f       	adc	r23, r24
 e9e:	89 1f       	adc	r24, r25
 ea0:	9a 1f       	adc	r25, r26
 ea2:	a1 1d       	adc	r26, r1
 ea4:	68 0f       	add	r22, r24
 ea6:	79 1f       	adc	r23, r25
 ea8:	8a 1f       	adc	r24, r26
 eaa:	91 1d       	adc	r25, r1
 eac:	a1 1d       	adc	r26, r1
 eae:	6a 0f       	add	r22, r26
 eb0:	71 1d       	adc	r23, r1
 eb2:	81 1d       	adc	r24, r1
 eb4:	91 1d       	adc	r25, r1
 eb6:	a1 1d       	adc	r26, r1
 eb8:	20 d0       	rcall	.+64     	; 0xefa <__ultoa_invert+0x84>
 eba:	09 f4       	brne	.+2      	; 0xebe <__ultoa_invert+0x48>
 ebc:	68 94       	set
 ebe:	3f 91       	pop	r19
 ec0:	2a e0       	ldi	r18, 0x0A	; 10
 ec2:	26 9f       	mul	r18, r22
 ec4:	11 24       	eor	r1, r1
 ec6:	30 19       	sub	r19, r0
 ec8:	30 5d       	subi	r19, 0xD0	; 208
 eca:	31 93       	st	Z+, r19
 ecc:	de f6       	brtc	.-74     	; 0xe84 <__ultoa_invert+0xe>
 ece:	cf 01       	movw	r24, r30
 ed0:	08 95       	ret
 ed2:	46 2f       	mov	r20, r22
 ed4:	47 70       	andi	r20, 0x07	; 7
 ed6:	40 5d       	subi	r20, 0xD0	; 208
 ed8:	41 93       	st	Z+, r20
 eda:	b3 e0       	ldi	r27, 0x03	; 3
 edc:	0f d0       	rcall	.+30     	; 0xefc <__ultoa_invert+0x86>
 ede:	c9 f7       	brne	.-14     	; 0xed2 <__ultoa_invert+0x5c>
 ee0:	f6 cf       	rjmp	.-20     	; 0xece <__ultoa_invert+0x58>
 ee2:	46 2f       	mov	r20, r22
 ee4:	4f 70       	andi	r20, 0x0F	; 15
 ee6:	40 5d       	subi	r20, 0xD0	; 208
 ee8:	4a 33       	cpi	r20, 0x3A	; 58
 eea:	18 f0       	brcs	.+6      	; 0xef2 <__ultoa_invert+0x7c>
 eec:	49 5d       	subi	r20, 0xD9	; 217
 eee:	31 fd       	sbrc	r19, 1
 ef0:	40 52       	subi	r20, 0x20	; 32
 ef2:	41 93       	st	Z+, r20
 ef4:	02 d0       	rcall	.+4      	; 0xefa <__ultoa_invert+0x84>
 ef6:	a9 f7       	brne	.-22     	; 0xee2 <__ultoa_invert+0x6c>
 ef8:	ea cf       	rjmp	.-44     	; 0xece <__ultoa_invert+0x58>
 efa:	b4 e0       	ldi	r27, 0x04	; 4
 efc:	a6 95       	lsr	r26
 efe:	97 95       	ror	r25
 f00:	87 95       	ror	r24
 f02:	77 95       	ror	r23
 f04:	67 95       	ror	r22
 f06:	ba 95       	dec	r27
 f08:	c9 f7       	brne	.-14     	; 0xefc <__ultoa_invert+0x86>
 f0a:	00 97       	sbiw	r24, 0x00	; 0
 f0c:	61 05       	cpc	r22, r1
 f0e:	71 05       	cpc	r23, r1
 f10:	08 95       	ret
 f12:	9b 01       	movw	r18, r22
 f14:	ac 01       	movw	r20, r24
 f16:	0a 2e       	mov	r0, r26
 f18:	06 94       	lsr	r0
 f1a:	57 95       	ror	r21
 f1c:	47 95       	ror	r20
 f1e:	37 95       	ror	r19
 f20:	27 95       	ror	r18
 f22:	ba 95       	dec	r27
 f24:	c9 f7       	brne	.-14     	; 0xf18 <__ultoa_invert+0xa2>
 f26:	62 0f       	add	r22, r18
 f28:	73 1f       	adc	r23, r19
 f2a:	84 1f       	adc	r24, r20
 f2c:	95 1f       	adc	r25, r21
 f2e:	a0 1d       	adc	r26, r0
 f30:	08 95       	ret

00000f32 <__prologue_saves__>:
 f32:	2f 92       	push	r2
 f34:	3f 92       	push	r3
 f36:	4f 92       	push	r4
 f38:	5f 92       	push	r5
 f3a:	6f 92       	push	r6
 f3c:	7f 92       	push	r7
 f3e:	8f 92       	push	r8
 f40:	9f 92       	push	r9
 f42:	af 92       	push	r10
 f44:	bf 92       	push	r11
 f46:	cf 92       	push	r12
 f48:	df 92       	push	r13
 f4a:	ef 92       	push	r14
 f4c:	ff 92       	push	r15
 f4e:	0f 93       	push	r16
 f50:	1f 93       	push	r17
 f52:	cf 93       	push	r28
 f54:	df 93       	push	r29
 f56:	cd b7       	in	r28, 0x3d	; 61
 f58:	de b7       	in	r29, 0x3e	; 62
 f5a:	ca 1b       	sub	r28, r26
 f5c:	db 0b       	sbc	r29, r27
 f5e:	0f b6       	in	r0, 0x3f	; 63
 f60:	f8 94       	cli
 f62:	de bf       	out	0x3e, r29	; 62
 f64:	0f be       	out	0x3f, r0	; 63
 f66:	cd bf       	out	0x3d, r28	; 61
 f68:	09 94       	ijmp

00000f6a <__epilogue_restores__>:
 f6a:	2a 88       	ldd	r2, Y+18	; 0x12
 f6c:	39 88       	ldd	r3, Y+17	; 0x11
 f6e:	48 88       	ldd	r4, Y+16	; 0x10
 f70:	5f 84       	ldd	r5, Y+15	; 0x0f
 f72:	6e 84       	ldd	r6, Y+14	; 0x0e
 f74:	7d 84       	ldd	r7, Y+13	; 0x0d
 f76:	8c 84       	ldd	r8, Y+12	; 0x0c
 f78:	9b 84       	ldd	r9, Y+11	; 0x0b
 f7a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f7c:	b9 84       	ldd	r11, Y+9	; 0x09
 f7e:	c8 84       	ldd	r12, Y+8	; 0x08
 f80:	df 80       	ldd	r13, Y+7	; 0x07
 f82:	ee 80       	ldd	r14, Y+6	; 0x06
 f84:	fd 80       	ldd	r15, Y+5	; 0x05
 f86:	0c 81       	ldd	r16, Y+4	; 0x04
 f88:	1b 81       	ldd	r17, Y+3	; 0x03
 f8a:	aa 81       	ldd	r26, Y+2	; 0x02
 f8c:	b9 81       	ldd	r27, Y+1	; 0x01
 f8e:	ce 0f       	add	r28, r30
 f90:	d1 1d       	adc	r29, r1
 f92:	0f b6       	in	r0, 0x3f	; 63
 f94:	f8 94       	cli
 f96:	de bf       	out	0x3e, r29	; 62
 f98:	0f be       	out	0x3f, r0	; 63
 f9a:	cd bf       	out	0x3d, r28	; 61
 f9c:	ed 01       	movw	r28, r26
 f9e:	08 95       	ret

00000fa0 <_exit>:
 fa0:	f8 94       	cli

00000fa2 <__stop_program>:
 fa2:	ff cf       	rjmp	.-2      	; 0xfa2 <__stop_program>
