
BCD-rastro-deslocamentobit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000017b  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000105  00000000  00000000  000003c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000167  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cb  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  00000833  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

#define set_bit(Y,bit_x) (Y|=(1<<bit_x)) //ativa o bit x da variavel Y (coloca em 1)
#define clr_bit(Y,bit_x) (Y&=~(1<<bit_x)) //limpa o bit x da variavel Y (coloca em 0)

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2e 97       	sbiw	r28, 0x0e	; 14
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	int Tabela[] = {PD0, PD1, PD2, PD3, PD4, PD5, PD6}; //array de pinos representando os segmentos
  aa:	8e e0       	ldi	r24, 0x0E	; 14
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	int i = 0;
	PORTD = 0b11111111; //habilita pull-up em todas as entradas
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8b b9       	out	0x0b, r24	; 11
	DDRD = 0xFF; //configura todos os pinos como saida
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	be 01       	movw	r22, r28
  c4:	6f 5f       	subi	r22, 0xFF	; 255
  c6:	7f 4f       	sbci	r23, 0xFF	; 255
  c8:	9e 01       	movw	r18, r28
  ca:	21 5f       	subi	r18, 0xF1	; 241
  cc:	3f 4f       	sbci	r19, 0xFF	; 255

#define set_bit(Y,bit_x) (Y|=(1<<bit_x)) //ativa o bit x da variavel Y (coloca em 1)
#define clr_bit(Y,bit_x) (Y&=~(1<<bit_x)) //limpa o bit x da variavel Y (coloca em 0)

int main(void)
{
  ce:	d6 2e       	mov	r13, r22
  d0:	e7 2e       	mov	r14, r23
	DDRD = 0xFF; //configura todos os pinos como saida
    while (1)
    {
		for(i=0;i<7;i++) //loop para a funcao liga
		{
			PORTD |= (1<<Tabela[i]);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	50 e0       	ldi	r21, 0x00	; 0
			_delay_ms(10);
		}
		for(i=0;i<7;i++) //loop para a funcao liga
		{
			PORTD &= ~(1>Tabela[i]);
  d6:	01 e0       	ldi	r16, 0x01	; 1
  d8:	f1 2c       	mov	r15, r1
  da:	db 01       	movw	r26, r22

#define set_bit(Y,bit_x) (Y|=(1<<bit_x)) //ativa o bit x da variavel Y (coloca em 1)
#define clr_bit(Y,bit_x) (Y&=~(1<<bit_x)) //limpa o bit x da variavel Y (coloca em 0)

int main(void)
{
  dc:	ed 2d       	mov	r30, r13
  de:	fe 2d       	mov	r31, r14
	DDRD = 0xFF; //configura todos os pinos como saida
    while (1)
    {
		for(i=0;i<7;i++) //loop para a funcao liga
		{
			PORTD |= (1<<Tabela[i]);
  e0:	1b b1       	in	r17, 0x0b	; 11
  e2:	80 81       	ld	r24, Z
  e4:	32 96       	adiw	r30, 0x02	; 2
  e6:	5a 01       	movw	r10, r20
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x58>
  ea:	aa 0c       	add	r10, r10
  ec:	bb 1c       	adc	r11, r11
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x54>
  f2:	c5 01       	movw	r24, r10
  f4:	81 2b       	or	r24, r17
  f6:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	9c e9       	ldi	r25, 0x9C	; 156
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x66>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x6c>
 102:	00 00       	nop
	int i = 0;
	PORTD = 0b11111111; //habilita pull-up em todas as entradas
	DDRD = 0xFF; //configura todos os pinos como saida
    while (1)
    {
		for(i=0;i<7;i++) //loop para a funcao liga
 104:	e2 17       	cp	r30, r18
 106:	f3 07       	cpc	r31, r19
 108:	59 f7       	brne	.-42     	; 0xe0 <main+0x4a>
			PORTD |= (1<<Tabela[i]);
			_delay_ms(10);
		}
		for(i=0;i<7;i++) //loop para a funcao liga
		{
			PORTD &= ~(1>Tabela[i]);
 10a:	9b b1       	in	r25, 0x0b	; 11
 10c:	ed 91       	ld	r30, X+
 10e:	fd 91       	ld	r31, X+
 110:	80 2f       	mov	r24, r16
 112:	1e 16       	cp	r1, r30
 114:	1f 06       	cpc	r1, r31
 116:	0c f4       	brge	.+2      	; 0x11a <main+0x84>
 118:	8f 2d       	mov	r24, r15
 11a:	80 95       	com	r24
 11c:	89 23       	and	r24, r25
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x8e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x94>
 12a:	00 00       	nop
		for(i=0;i<7;i++) //loop para a funcao liga
		{
			PORTD |= (1<<Tabela[i]);
			_delay_ms(10);
		}
		for(i=0;i<7;i++) //loop para a funcao liga
 12c:	a2 17       	cp	r26, r18
 12e:	b3 07       	cpc	r27, r19
 130:	61 f7       	brne	.-40     	; 0x10a <main+0x74>
 132:	d3 cf       	rjmp	.-90     	; 0xda <main+0x44>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
