
CTC-MotordePasso.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000bb  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000083  00000000  00000000  000002f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000d9  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000169  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000005fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000639  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

volatile unsigned char cont = 0;

int main(void)
{
	MOTOR_DDR = 0b11111111;
  90:	9f ef       	ldi	r25, 0xFF	; 255
  92:	94 b9       	out	0x04, r25	; 4
	MOTOR_PORT = 0x00;
  94:	15 b8       	out	0x05, r1	; 5
	
	timer0ClockPrescaller1024();
  96:	85 b5       	in	r24, 0x25	; 37
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	85 bd       	out	0x25, r24	; 37
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	85 bd       	out	0x25, r24	; 37
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	85 bd       	out	0x25, r24	; 37
	timer0ActivateCompareAInterrupt();
  a8:	ee e6       	ldi	r30, 0x6E	; 110
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	timer0CTCMode();
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	85 bd       	out	0x25, r24	; 37
  b8:	84 b5       	in	r24, 0x24	; 36
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	84 bd       	out	0x24, r24	; 36
  be:	84 b5       	in	r24, 0x24	; 36
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	84 bd       	out	0x24, r24	; 36
	timer0SetCompareAValue(255);
  c4:	97 bd       	out	0x27, r25	; 39
	
	sei();
  c6:	78 94       	sei
   
    while (1) 
    {
    }
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x38>

000000ca <__vector_14>:
}

ISR(TIMER0_COMPA_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
	clrBit(MOTOR_PORT, BOB0);
  d6:	28 98       	cbi	0x05, 0	; 5
	clrBit(MOTOR_PORT, BOB1);
  d8:	29 98       	cbi	0x05, 1	; 5
	clrBit(MOTOR_PORT, BOB2);
  da:	2a 98       	cbi	0x05, 2	; 5
	clrBit(MOTOR_PORT, BOB3);
  dc:	2b 98       	cbi	0x05, 3	; 5
	
	if(cont == 20)
  de:	80 91 00 01 	lds	r24, 0x0100
  e2:	84 31       	cpi	r24, 0x14	; 20
  e4:	09 f4       	brne	.+2      	; 0xe8 <__vector_14+0x1e>
	setBit(MOTOR_PORT, BOB0);
  e6:	28 9a       	sbi	0x05, 0	; 5
	
	if(cont == 40)
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	88 32       	cpi	r24, 0x28	; 40
  ee:	09 f4       	brne	.+2      	; 0xf2 <__vector_14+0x28>
	setBit(MOTOR_PORT, BOB1);
  f0:	29 9a       	sbi	0x05, 1	; 5
	
	if(cont == 60)
  f2:	80 91 00 01 	lds	r24, 0x0100
  f6:	8c 33       	cpi	r24, 0x3C	; 60
  f8:	09 f4       	brne	.+2      	; 0xfc <__vector_14+0x32>
	setBit(MOTOR_PORT, BOB2);
  fa:	2a 9a       	sbi	0x05, 2	; 5
	
	if(cont == 80)
  fc:	80 91 00 01 	lds	r24, 0x0100
 100:	80 35       	cpi	r24, 0x50	; 80
 102:	09 f4       	brne	.+2      	; 0x106 <__vector_14+0x3c>
	setBit(MOTOR_PORT, BOB3);
 104:	2b 9a       	sbi	0x05, 3	; 5
	
	cont++;
 106:	80 91 00 01 	lds	r24, 0x0100
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	80 93 00 01 	sts	0x0100, r24
	
	if(cont > 80)
 110:	80 91 00 01 	lds	r24, 0x0100
 114:	81 35       	cpi	r24, 0x51	; 81
 116:	10 f0       	brcs	.+4      	; 0x11c <__vector_14+0x52>
	cont = 0;
 118:	10 92 00 01 	sts	0x0100, r1
}
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
