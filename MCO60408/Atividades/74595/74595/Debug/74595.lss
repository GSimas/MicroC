
74595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000186  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010b  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000153  00000000  00000000  000004a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000173  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000199  00000000  00000000  0000079b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define SN74595_SRCLR PC1
#define SN74595_RCLK PC3
#define SN74595_OE PC4
								
int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	60 97       	sbiw	r28, 0x10	; 16
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	unsigned char i = 0;
	unsigned char cont = 0;
	SN74595_DDR = 0b00011111;
  aa:	8f e1       	ldi	r24, 0x1F	; 31
  ac:	87 b9       	out	0x07, r24	; 7
	SN74595_PORT = 0x00;
  ae:	18 b8       	out	0x08, r1	; 8
	
	unsigned char Tabela[16] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78,
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	8a 95       	dec	r24
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x24>
								0x00, 0x18, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0E};
	
	set_bit(SN74595_PORT, PC5);
  c2:	45 9a       	sbi	0x08, 5	; 8
	set_bit(SN74595_PORT, SN74595_SRCLR);
  c4:	41 9a       	sbi	0x08, 1	; 8
#define SN74595_OE PC4
								
int main(void)
{
	unsigned char i = 0;
	unsigned char cont = 0;
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	50 e0       	ldi	r21, 0x00	; 0
			clr_bit(SN74595_PORT, SN74595_RCLK);
			_delay_ms(200);
		//incrementar dado
		cont++;
		if(cont >= 16)	
			cont = 0;	
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <main+0x3c>
  d0:	47 2f       	mov	r20, r23
#define SN74595_OE PC4
								
int main(void)
{
	unsigned char i = 0;
	unsigned char cont = 0;
  d2:	86 2f       	mov	r24, r22
  d4:	95 2f       	mov	r25, r21
    while(1)
    {
		//armazenar dado
		for(i=0; i < 8; i++)
		{
			if(tst_bit(Tabela[cont],i))
  d6:	e1 e0       	ldi	r30, 0x01	; 1
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ec 0f       	add	r30, r28
  dc:	fd 1f       	adc	r31, r29
  de:	e4 0f       	add	r30, r20
  e0:	f1 1d       	adc	r31, r1
  e2:	20 81       	ld	r18, Z
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	08 2e       	mov	r0, r24
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x58>
  ea:	35 95       	asr	r19
  ec:	27 95       	ror	r18
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x54>
  f2:	20 ff       	sbrs	r18, 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x64>
				set_bit(SN74595_PORT, SN74595_SER);
  f6:	40 9a       	sbi	0x08, 0	; 8
  f8:	01 c0       	rjmp	.+2      	; 0xfc <main+0x66>
			else
				clr_bit(SN74595_PORT,SN74595_SER);
  fa:	40 98       	cbi	0x08, 0	; 8
			set_bit(SN74595_PORT, SN74595_SRCLK);
  fc:	42 9a       	sbi	0x08, 2	; 8
			clr_bit(SN74595_PORT, SN74595_SRCLK);
  fe:	42 98       	cbi	0x08, 2	; 8
 100:	01 96       	adiw	r24, 0x01	; 1
	set_bit(SN74595_PORT, SN74595_SRCLR);
	
    while(1)
    {
		//armazenar dado
		for(i=0; i < 8; i++)
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	91 05       	cpc	r25, r1
 106:	69 f7       	brne	.-38     	; 0xe2 <main+0x4c>
				clr_bit(SN74595_PORT,SN74595_SER);
			set_bit(SN74595_PORT, SN74595_SRCLK);
			clr_bit(SN74595_PORT, SN74595_SRCLK);
		}
		//mostrar dado
			set_bit(SN74595_PORT, SN74595_RCLK);
 108:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	83 ec       	ldi	r24, 0xC3	; 195
 10e:	99 e0       	ldi	r25, 0x09	; 9
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x7a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x84>
 11a:	00 00       	nop
			_delay_ms(200);
			clr_bit(SN74595_PORT, SN74595_RCLK);
 11c:	43 98       	cbi	0x08, 3	; 8
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	83 ec       	ldi	r24, 0xC3	; 195
 122:	99 e0       	ldi	r25, 0x09	; 9
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x8e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x98>
 12e:	00 00       	nop
			_delay_ms(200);
		//incrementar dado
		cont++;
 130:	4f 5f       	subi	r20, 0xFF	; 255
		if(cont >= 16)	
 132:	40 31       	cpi	r20, 0x10	; 16
 134:	68 f6       	brcc	.-102    	; 0xd0 <main+0x3a>
 136:	cd cf       	rjmp	.-102    	; 0xd2 <main+0x3c>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
