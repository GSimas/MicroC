
LCD_Asterisk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010e  0080010e  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c57  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f7  00000000  00000000  000011af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a7  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ca  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000347  00000000  00000000  00001da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000020ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 82 01 	call	0x304	; 0x304 <main>
  9e:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcdCommand>:

void lcdCommand(int8 command)
{
	uint8 i = 2;

	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((command >> 4) << LCD_DATA_D4);
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	28 2f       	mov	r18, r24
  aa:	20 7f       	andi	r18, 0xF0	; 240
  ac:	9f 70       	andi	r25, 0x0F	; 15
  ae:	92 2b       	or	r25, r18
  b0:	9b b9       	out	0x0b, r25	; 11
		_delay_us(1);
		clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
		_delay_us(45);
		if(command < 4)
			_delay_ms(2);
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((command & 0x0F) << LCD_DATA_D4);
  b2:	38 2f       	mov	r19, r24
  b4:	32 95       	swap	r19
  b6:	30 7f       	andi	r19, 0xF0	; 240
  b8:	22 e0       	ldi	r18, 0x02	; 2
{
	uint8 i = 2;

	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((command >> 4) << LCD_DATA_D4);
	do{
		clrBit(LCD_CONTROL_PORT, LCD_CONTROL_RS);
  ba:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	95 e0       	ldi	r25, 0x05	; 5
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcdCommand+0x18>
  c2:	00 00       	nop
		_delay_us(1);
		setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
  c4:	29 9a       	sbi	0x05, 1	; 5
  c6:	e5 e0       	ldi	r30, 0x05	; 5
  c8:	ea 95       	dec	r30
  ca:	f1 f7       	brne	.-4      	; 0xc8 <lcdCommand+0x22>
  cc:	00 00       	nop
		_delay_us(1);
		clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
  ce:	29 98       	cbi	0x05, 1	; 5
  d0:	f0 ef       	ldi	r31, 0xF0	; 240
  d2:	fa 95       	dec	r31
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcdCommand+0x2c>
		_delay_us(45);
		if(command < 4)
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	30 f4       	brcc	.+12     	; 0xe6 <lcdCommand+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef e3       	ldi	r30, 0x3F	; 63
  dc:	ff e1       	ldi	r31, 0x1F	; 31
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcdCommand+0x38>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcdCommand+0x3e>
  e4:	00 00       	nop
			_delay_ms(2);
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((command & 0x0F) << LCD_DATA_D4);
  e6:	9b b1       	in	r25, 0x0b	; 11
  e8:	9f 70       	andi	r25, 0x0F	; 15
  ea:	93 2b       	or	r25, r19
  ec:	9b b9       	out	0x0b, r25	; 11
  ee:	21 50       	subi	r18, 0x01	; 1
		i--;
	}while(i > 0);
  f0:	21 f7       	brne	.-56     	; 0xba <lcdCommand+0x14>
	return;
}
  f2:	08 95       	ret

000000f4 <lcdInit>:
/* -----------------------------------------------------------------------------
 * Performs LCD module initialization.
 * -------------------------------------------------------------------------- */

void lcdInit(void)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
	lcdIOConfigure();
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8f 70       	andi	r24, 0x0F	; 15
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	80 6f       	ori	r24, 0xF0	; 240
 102:	8a b9       	out	0x0a, r24	; 10
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8c 7f       	andi	r24, 0xFC	; 252
 108:	85 b9       	out	0x05, r24	; 5
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	84 b9       	out	0x04, r24	; 4
	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | (0x03 << LCD_DATA_D4);
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	80 63       	ori	r24, 0x30	; 48
 116:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcdInit+0x26>
 11e:	00 00       	nop
	_delay_us(1);
	setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 120:	29 9a       	sbi	0x05, 1	; 5
 122:	95 e0       	ldi	r25, 0x05	; 5
 124:	9a 95       	dec	r25
 126:	f1 f7       	brne	.-4      	; 0x124 <lcdInit+0x30>
 128:	00 00       	nop
	_delay_us(1);
	clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 12a:	29 98       	cbi	0x05, 1	; 5
 12c:	80 ef       	ldi	r24, 0xF0	; 240
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <lcdInit+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	8f e1       	ldi	r24, 0x1F	; 31
 134:	9e e4       	ldi	r25, 0x4E	; 78
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcdInit+0x42>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcdInit+0x48>
 13c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	95 e0       	ldi	r25, 0x05	; 5
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <lcdInit+0x4c>
 144:	00 00       	nop
	_delay_us(45);
	_delay_ms(5);
	_delay_us(1);
	setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 146:	29 9a       	sbi	0x05, 1	; 5
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcdInit+0x56>
 14e:	00 00       	nop
	_delay_us(1);
	clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 150:	29 98       	cbi	0x05, 1	; 5
 152:	90 ef       	ldi	r25, 0xF0	; 240
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <lcdInit+0x60>
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcdInit+0x68>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcdInit+0x6e>
 162:	00 00       	nop
 164:	95 e0       	ldi	r25, 0x05	; 5
 166:	9a 95       	dec	r25
 168:	f1 f7       	brne	.-4      	; 0x166 <lcdInit+0x72>
 16a:	00 00       	nop
	_delay_us(45);
	_delay_us(200);
	_delay_us(1);
	setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 16c:	29 9a       	sbi	0x05, 1	; 5
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	8a 95       	dec	r24
 172:	f1 f7       	brne	.-4      	; 0x170 <lcdInit+0x7c>
 174:	00 00       	nop
	_delay_us(1);
	clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 176:	29 98       	cbi	0x05, 1	; 5
 178:	90 ef       	ldi	r25, 0xF0	; 240
 17a:	9a 95       	dec	r25
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcdInit+0x86>
	_delay_us(45);
	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | (0x02 << LCD_DATA_D4);
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	80 62       	ori	r24, 0x20	; 32
 184:	8b b9       	out	0x0b, r24	; 11
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcdInit+0x94>
 18c:	00 00       	nop
	_delay_us(1);
	setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 18e:	29 9a       	sbi	0x05, 1	; 5
 190:	95 e0       	ldi	r25, 0x05	; 5
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <lcdInit+0x9e>
 196:	00 00       	nop
	_delay_us(1);
	clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 198:	29 98       	cbi	0x05, 1	; 5
 19a:	80 ef       	ldi	r24, 0xF0	; 240
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcdInit+0xa8>
	_delay_us(45);
	lcdCommand(0x28);
 1a0:	88 e2       	ldi	r24, 0x28	; 40
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x08);
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
   	lcdClearScreen();
 1ac:	ce e0       	ldi	r28, 0x0E	; 14
 1ae:	d1 e0       	ldi	r29, 0x01	; 1
 1b0:	18 82       	st	Y, r1
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
   	lcdDisplayOn();   
 1b8:	ef e0       	ldi	r30, 0x0F	; 15
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	90 81       	ld	r25, Z
 1be:	91 60       	ori	r25, 0x01	; 1
 1c0:	90 83       	st	Z, r25
 1c2:	92 fb       	bst	r25, 2
 1c4:	88 27       	eor	r24, r24
 1c6:	80 f9       	bld	r24, 0
 1c8:	8c 60       	ori	r24, 0x0C	; 12
 1ca:	92 70       	andi	r25, 0x02	; 2
 1cc:	89 2b       	or	r24, r25
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
   	lcdCursorMoveFirstLine();
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	88 83       	st	Y, r24
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	return;
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <lcdWrite>:

void lcdWrite(int8 character)
{
	uint8 i = 2;

	if(character == '\n')
 1e2:	8a 30       	cpi	r24, 0x0A	; 10
 1e4:	e1 f4       	brne	.+56     	; 0x21e <lcdWrite+0x3c>
		lcdCursorMoveNextLine();
 1e6:	80 91 0e 01 	lds	r24, 0x010E
 1ea:	83 70       	andi	r24, 0x03	; 3
 1ec:	51 f4       	brne	.+20     	; 0x202 <lcdWrite+0x20>
 1ee:	ee e0       	ldi	r30, 0x0E	; 14
 1f0:	f1 e0       	ldi	r31, 0x01	; 1
 1f2:	80 81       	ld	r24, Z
 1f4:	8c 7f       	andi	r24, 0xFC	; 252
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	80 83       	st	Z, r24
 1fa:	80 ec       	ldi	r24, 0xC0	; 192
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 200:	08 c0       	rjmp	.+16     	; 0x212 <lcdWrite+0x30>
 202:	ee e0       	ldi	r30, 0x0E	; 14
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	80 81       	ld	r24, Z
 208:	8c 7f       	andi	r24, 0xFC	; 252
 20a:	80 83       	st	Z, r24
 20c:	80 e8       	ldi	r24, 0x80	; 128
 20e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 212:	ee e0       	ldi	r30, 0x0E	; 14
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	80 81       	ld	r24, Z
 218:	83 70       	andi	r24, 0x03	; 3
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret
	else{
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character >> 4) << LCD_DATA_D4);
 21e:	9b b1       	in	r25, 0x0b	; 11
 220:	28 2f       	mov	r18, r24
 222:	20 7f       	andi	r18, 0xF0	; 240
 224:	9f 70       	andi	r25, 0x0F	; 15
 226:	92 2b       	or	r25, r18
 228:	9b b9       	out	0x0b, r25	; 11
			_delay_us(1);
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
			_delay_us(1);
			clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
			_delay_us(45);
			LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character & 0x0F) << LCD_DATA_D4);
 22a:	82 95       	swap	r24
 22c:	80 7f       	andi	r24, 0xF0	; 240
 22e:	22 e0       	ldi	r18, 0x02	; 2
	if(character == '\n')
		lcdCursorMoveNextLine();
	else{
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character >> 4) << LCD_DATA_D4);
		do{
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_RS);
 230:	28 9a       	sbi	0x05, 0	; 5
 232:	95 e0       	ldi	r25, 0x05	; 5
 234:	9a 95       	dec	r25
 236:	f1 f7       	brne	.-4      	; 0x234 <lcdWrite+0x52>
 238:	00 00       	nop
			_delay_us(1);
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 23a:	29 9a       	sbi	0x05, 1	; 5
 23c:	95 e0       	ldi	r25, 0x05	; 5
 23e:	9a 95       	dec	r25
 240:	f1 f7       	brne	.-4      	; 0x23e <lcdWrite+0x5c>
 242:	00 00       	nop
			_delay_us(1);
			clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 244:	29 98       	cbi	0x05, 1	; 5
 246:	90 ef       	ldi	r25, 0xF0	; 240
 248:	9a 95       	dec	r25
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcdWrite+0x66>
			_delay_us(45);
			LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character & 0x0F) << LCD_DATA_D4);
 24c:	9b b1       	in	r25, 0x0b	; 11
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 2b       	or	r25, r24
 252:	9b b9       	out	0x0b, r25	; 11
 254:	21 50       	subi	r18, 0x01	; 1
			i--;
		}while(i > 0);
 256:	61 f7       	brne	.-40     	; 0x230 <lcdWrite+0x4e>
 258:	08 95       	ret

0000025a <lcdWriteStd>:
/* -----------------------------------------------------------------------------
 * Writes a character on the display using the standard output handler.
 * -------------------------------------------------------------------------- */

int16 lcdWriteStd(int8 character, FILE * stream)
{
 25a:	cf 93       	push	r28
	uint8 i = 2;

	if(character == '\n'){
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	41 f5       	brne	.+80     	; 0x2b0 <lcdWriteStd+0x56>
		for(i = lcdConfiguration.column;i < (LCD_COLUMNS);i++)
 260:	c0 91 0e 01 	lds	r28, 0x010E
 264:	c6 95       	lsr	r28
 266:	c6 95       	lsr	r28
 268:	c0 31       	cpi	r28, 0x10	; 16
 26a:	30 f4       	brcc	.+12     	; 0x278 <lcdWriteStd+0x1e>
			lcdWrite(' ');
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcdWrite>
int16 lcdWriteStd(int8 character, FILE * stream)
{
	uint8 i = 2;

	if(character == '\n'){
		for(i = lcdConfiguration.column;i < (LCD_COLUMNS);i++)
 272:	cf 5f       	subi	r28, 0xFF	; 255
 274:	c0 31       	cpi	r28, 0x10	; 16
 276:	d1 f7       	brne	.-12     	; 0x26c <lcdWriteStd+0x12>
			lcdWrite(' ');
		lcdCursorMoveNextLine();
 278:	80 91 0e 01 	lds	r24, 0x010E
 27c:	83 70       	andi	r24, 0x03	; 3
 27e:	51 f4       	brne	.+20     	; 0x294 <lcdWriteStd+0x3a>
 280:	ee e0       	ldi	r30, 0x0E	; 14
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	80 81       	ld	r24, Z
 286:	8c 7f       	andi	r24, 0xFC	; 252
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	80 83       	st	Z, r24
 28c:	80 ec       	ldi	r24, 0xC0	; 192
 28e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <lcdWriteStd+0x4a>
 294:	ee e0       	ldi	r30, 0x0E	; 14
 296:	f1 e0       	ldi	r31, 0x01	; 1
 298:	80 81       	ld	r24, Z
 29a:	8c 7f       	andi	r24, 0xFC	; 252
 29c:	80 83       	st	Z, r24
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 2a4:	ee e0       	ldi	r30, 0x0E	; 14
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	80 81       	ld	r24, Z
 2aa:	83 70       	andi	r24, 0x03	; 3
 2ac:	80 83       	st	Z, r24
 2ae:	26 c0       	rjmp	.+76     	; 0x2fc <lcdWriteStd+0xa2>
	}else{
		lcdConfiguration.column++;
 2b0:	ee e0       	ldi	r30, 0x0E	; 14
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	90 81       	ld	r25, Z
 2b6:	29 2f       	mov	r18, r25
 2b8:	2c 7f       	andi	r18, 0xFC	; 252
 2ba:	2c 5f       	subi	r18, 0xFC	; 252
 2bc:	93 70       	andi	r25, 0x03	; 3
 2be:	92 2b       	or	r25, r18
 2c0:	90 83       	st	Z, r25
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character >> 4) << LCD_DATA_D4);
 2c2:	9b b1       	in	r25, 0x0b	; 11
 2c4:	28 2f       	mov	r18, r24
 2c6:	20 7f       	andi	r18, 0xF0	; 240
 2c8:	9f 70       	andi	r25, 0x0F	; 15
 2ca:	92 2b       	or	r25, r18
 2cc:	9b b9       	out	0x0b, r25	; 11
			_delay_us(1);
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
			_delay_us(1);
			clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
			_delay_us(45);
			LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character & 0x0F) << LCD_DATA_D4);
 2ce:	82 95       	swap	r24
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	22 e0       	ldi	r18, 0x02	; 2
		lcdCursorMoveNextLine();
	}else{
		lcdConfiguration.column++;
		LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character >> 4) << LCD_DATA_D4);
		do{
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_RS);
 2d4:	28 9a       	sbi	0x05, 0	; 5
 2d6:	95 e0       	ldi	r25, 0x05	; 5
 2d8:	9a 95       	dec	r25
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcdWriteStd+0x7e>
 2dc:	00 00       	nop
			_delay_us(1);
			setBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 2de:	29 9a       	sbi	0x05, 1	; 5
 2e0:	95 e0       	ldi	r25, 0x05	; 5
 2e2:	9a 95       	dec	r25
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcdWriteStd+0x88>
 2e6:	00 00       	nop
			_delay_us(1);
			clrBit(LCD_CONTROL_PORT, LCD_CONTROL_E);
 2e8:	29 98       	cbi	0x05, 1	; 5
 2ea:	90 ef       	ldi	r25, 0xF0	; 240
 2ec:	9a 95       	dec	r25
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <lcdWriteStd+0x92>
			_delay_us(45);
			LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_D4))) | ((character & 0x0F) << LCD_DATA_D4);
 2f0:	9b b1       	in	r25, 0x0b	; 11
 2f2:	9f 70       	andi	r25, 0x0F	; 15
 2f4:	98 2b       	or	r25, r24
 2f6:	9b b9       	out	0x0b, r25	; 11
 2f8:	21 50       	subi	r18, 0x01	; 1
			i--;
		}while(i > 0);
 2fa:	61 f7       	brne	.-40     	; 0x2d4 <lcdWriteStd+0x7a>
	}
	return 0;
}
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <main>:
#include "ls_hd44780.h"


int main(void)
{
    lcdInit();
 304:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcdInit>
	lcdStdio();
 308:	e0 e1       	ldi	r30, 0x10	; 16
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	95 83       	std	Z+5, r25	; 0x05
 312:	84 83       	std	Z+4, r24	; 0x04
 314:	93 83       	std	Z+3, r25	; 0x03
 316:	82 83       	std	Z+2, r24	; 0x02
 318:	91 83       	std	Z+1, r25	; 0x01
 31a:	80 83       	st	Z, r24
	int i = 0;
	
	printf("*");
 31c:	8a e2       	ldi	r24, 0x2A	; 42
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 b5 01 	call	0x36a	; 0x36a <putchar>
#include "ls_atmega328.h"
#include "ls_hd44780.h"


int main(void)
{
 324:	0f e0       	ldi	r16, 0x0F	; 15
 326:	10 e0       	ldi	r17, 0x00	; 0
 328:	c0 2f       	mov	r28, r16
 32a:	d1 2f       	mov	r29, r17
	
    while (1) 
    {
		for(i=0;i<15;i++)
		{
			lcdDisplayShiftRight();
 32c:	8c e1       	ldi	r24, 0x1C	; 28
 32e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 332:	9f ef       	ldi	r25, 0xFF	; 255
 334:	21 ee       	ldi	r18, 0xE1	; 225
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	20 40       	sbci	r18, 0x00	; 0
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x34>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0x3e>
 342:	00 00       	nop
 344:	21 97       	sbiw	r28, 0x01	; 1
	
	printf("*");
	
    while (1) 
    {
		for(i=0;i<15;i++)
 346:	91 f7       	brne	.-28     	; 0x32c <main+0x28>
 348:	c0 2f       	mov	r28, r16
 34a:	d1 2f       	mov	r29, r17
			lcdDisplayShiftRight();
			_delay_ms(100);
		}
		for(i=15;i>0;i--)
		{
			lcdDisplayShiftLeft();
 34c:	88 e1       	ldi	r24, 0x18	; 24
 34e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	91 ee       	ldi	r25, 0xE1	; 225
 356:	24 e0       	ldi	r18, 0x04	; 4
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	90 40       	sbci	r25, 0x00	; 0
 35c:	20 40       	sbci	r18, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x54>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x5e>
 362:	00 00       	nop
 364:	21 97       	sbiw	r28, 0x01	; 1
		for(i=0;i<15;i++)
		{
			lcdDisplayShiftRight();
			_delay_ms(100);
		}
		for(i=15;i>0;i--)
 366:	91 f7       	brne	.-28     	; 0x34c <main+0x48>
 368:	df cf       	rjmp	.-66     	; 0x328 <main+0x24>

0000036a <putchar>:
 36a:	60 91 12 01 	lds	r22, 0x0112
 36e:	70 91 13 01 	lds	r23, 0x0113
 372:	0e 94 bc 01 	call	0x378	; 0x378 <fputc>
 376:	08 95       	ret

00000378 <fputc>:
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	fb 01       	movw	r30, r22
 382:	23 81       	ldd	r18, Z+3	; 0x03
 384:	21 fd       	sbrc	r18, 1
 386:	03 c0       	rjmp	.+6      	; 0x38e <fputc+0x16>
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	28 c0       	rjmp	.+80     	; 0x3de <fputc+0x66>
 38e:	22 ff       	sbrs	r18, 2
 390:	16 c0       	rjmp	.+44     	; 0x3be <fputc+0x46>
 392:	46 81       	ldd	r20, Z+6	; 0x06
 394:	57 81       	ldd	r21, Z+7	; 0x07
 396:	24 81       	ldd	r18, Z+4	; 0x04
 398:	35 81       	ldd	r19, Z+5	; 0x05
 39a:	42 17       	cp	r20, r18
 39c:	53 07       	cpc	r21, r19
 39e:	44 f4       	brge	.+16     	; 0x3b0 <fputc+0x38>
 3a0:	a0 81       	ld	r26, Z
 3a2:	b1 81       	ldd	r27, Z+1	; 0x01
 3a4:	9d 01       	movw	r18, r26
 3a6:	2f 5f       	subi	r18, 0xFF	; 255
 3a8:	3f 4f       	sbci	r19, 0xFF	; 255
 3aa:	31 83       	std	Z+1, r19	; 0x01
 3ac:	20 83       	st	Z, r18
 3ae:	8c 93       	st	X, r24
 3b0:	26 81       	ldd	r18, Z+6	; 0x06
 3b2:	37 81       	ldd	r19, Z+7	; 0x07
 3b4:	2f 5f       	subi	r18, 0xFF	; 255
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	37 83       	std	Z+7, r19	; 0x07
 3ba:	26 83       	std	Z+6, r18	; 0x06
 3bc:	10 c0       	rjmp	.+32     	; 0x3de <fputc+0x66>
 3be:	eb 01       	movw	r28, r22
 3c0:	09 2f       	mov	r16, r25
 3c2:	18 2f       	mov	r17, r24
 3c4:	00 84       	ldd	r0, Z+8	; 0x08
 3c6:	f1 85       	ldd	r31, Z+9	; 0x09
 3c8:	e0 2d       	mov	r30, r0
 3ca:	09 95       	icall
 3cc:	89 2b       	or	r24, r25
 3ce:	e1 f6       	brne	.-72     	; 0x388 <fputc+0x10>
 3d0:	8e 81       	ldd	r24, Y+6	; 0x06
 3d2:	9f 81       	ldd	r25, Y+7	; 0x07
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	9f 83       	std	Y+7, r25	; 0x07
 3d8:	8e 83       	std	Y+6, r24	; 0x06
 3da:	81 2f       	mov	r24, r17
 3dc:	90 2f       	mov	r25, r16
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
