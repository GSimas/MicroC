
BCD-rotacao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000011a  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000140  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000149  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ad  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  0000078d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define clr_bit(Y,bit_x) (Y&=~(1<<bit_x)) //limpa o bit x da variavel Y (coloca em 0)

#define muda(Y, bit_x, bit_y) (set_bit(Y,bit_x),clr_bit(Y,bit_y),_delay_ms(10)) //coloca o bit x em 1 e o bit y em 0, tendo um delay de 10ms

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2e 97       	sbiw	r28, 0x0e	; 14
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	unsigned int Tabela[] = {PD0, PD1, PD2, PD3, PD4, PD5, PD0}; //array de pinos representando os segmentos
  aa:	8e e0       	ldi	r24, 0x0E	; 14
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	int i = 0;
	PORTD = 0b11111111; //habilita pull-up em todas as entradas
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8b b9       	out	0x0b, r24	; 11
	DDRD = 0xFF; //configura todos os pinos como saida
  c0:	8a b9       	out	0x0a, r24	; 10
	set_bit(PORTD, PD6);
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	be 01       	movw	r22, r28
  c6:	63 5f       	subi	r22, 0xF3	; 243
  c8:	7f 4f       	sbci	r23, 0xFF	; 255
    while (1) 
    {
		for(i=0;i<6;i++) //loop para a funcao "muda"
		{
			muda(PORTD, Tabela[i], Tabela[i+1]); //funcao para ligar e desligar segmento de acordo com o array Tabela
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	fe 01       	movw	r30, r28
  d0:	31 96       	adiw	r30, 0x01	; 1
  d2:	2b b1       	in	r18, 0x0b	; 11
  d4:	80 81       	ld	r24, Z
  d6:	32 96       	adiw	r30, 0x02	; 2
  d8:	da 01       	movw	r26, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x4a>
  dc:	aa 0f       	add	r26, r26
  de:	bb 1f       	adc	r27, r27
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <main+0x46>
  e4:	cd 01       	movw	r24, r26
  e6:	82 2b       	or	r24, r18
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	9a 01       	movw	r18, r20
  ee:	00 80       	ld	r0, Z
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x60>
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <main+0x5c>
  fa:	82 2f       	mov	r24, r18
  fc:	80 95       	com	r24
  fe:	89 23       	and	r24, r25
 100:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9c e9       	ldi	r25, 0x9C	; 156
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x70>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x76>
 10c:	00 00       	nop
	PORTD = 0b11111111; //habilita pull-up em todas as entradas
	DDRD = 0xFF; //configura todos os pinos como saida
	set_bit(PORTD, PD6);
    while (1) 
    {
		for(i=0;i<6;i++) //loop para a funcao "muda"
 10e:	e6 17       	cp	r30, r22
 110:	f7 07       	cpc	r31, r23
 112:	f9 f6       	brne	.-66     	; 0xd2 <main+0x3c>
 114:	dc cf       	rjmp	.-72     	; 0xce <main+0x38>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
